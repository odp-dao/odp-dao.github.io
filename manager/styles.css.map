{"version":3,"file":"styles.css","mappings":";;;AAAA;AC8ME;EACE,gBAlMU;EAmMV,eApMQ;EAqMR;AD5MJ;AC+ME;EAEE;AD7MJ;ACgNE;EACE;AD7MJ;AE8KE;ECxGE;EAcF;ED4FE;AF1KJ;AE6KE;EC7GE;EAcF;EDiGE;AFzKJ;AE4KE;EClHE;EAcF;EDsGE;AFxKJ;AE2KE;ECvHE;EAcF;ED2GE;AFvKJ;AE6KE;EC/HE;EDwIA;AFjLJ;AEoLE;EC3IE;EDoJA;AFxLJ;AE2LE;ECvJE;EAcF;AH7CF;AE0LE;EC3JE;EAcF;AHxCF;AEwLI;EACE;AFtLN;AE0LE;ECnKE;EAcF;AHhCF;AEyLE;ECvKE;EAcF;ED2JE;AFrLJ;AEwLE;EC5KE;EAcF;EDgKE;AFpLJ;AEuLE;ECjLE;EAcF;EDqKE;AFnLJ;AEsLE;ECtLE;EAcF;ED0KE;AFlLJ;AIpEE;ED8DE;EAcF;AHHF;AK0EE;;EAGI;EACA;EACA;ALxEN;AMZE;EACE;ANeJ;AO1EE;EACE;AP6EJ;AO1EE;EAEI;EACA;AP4EN;AOxEE;EACE;AP2EJ;AOxEE;;EAEE;AP2EJ;AQrBE;EACE;ARwBJ;AQpBE;EACE;ARuBJ;ASrCE;EACE;EACA;ATwCJ;AStCI;;EAEE,eA7FkB;ATqIxB;AUtGE;EACE;AVyGJ;AUtGE;EACE;EACA;AVyGJ;AUtGE;EACE;AVyGJ;AW+BE;EACE;AX5BJ;AW+BE;EACE,eA/KsB;AXmJ1B;AW+BE;;EAGI;EACA;AX7BN;AWiCE;EAEI,eA3L6B;EA4L7B;AX/BN;AYtJE;ET6DE;EAcF;AHgFF;AatHE;EAEI;EACA;EACA;AbwHN;AapHE;EVgBE;EAcF;AH2FF;AcvBE;EX3FE,kBAiBU;EAhBV,gBAiBY;EAhBZ,kBAiBY;EAhBZ,iDAiBY;EAGd;AHmGF;Ac3BE;EACE,yBAPuB;AdqC3B;AcxBI;;EACE,eAvB2B;EAwB3B,kBAxCU;AdoEhB;AcxBI;;EACE;EACA;Ad2BN;AczBM;;EACE;EACA,kBAlDQ;Ad8EhB;AcvBE;EACE;EAEA;AdyBJ;AcrBI;;EAzEF;EAEA;AdkGF;AcnBI;EAjFF;EAEA;AdsGF;AchBE;EACE;EACA,sBApEiB;AduFrB;AchBE;EACE;AdmBJ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CA;EACA;EAxCE;EACA;AvC8oBJ;AuCroBE;EA6BA;EACA;EA5BE;AvCyoBJ;AuC/nBE;EAA0C;AvCmoB5C;AuCnoBE;EAA0C;AvCmoB5C;AuCloBE;EAAwC;AvCqoB1C;AuCroBE;EAAwC;AvCqoB1C;AuCnoBE;EAEE;UAAA;AvCooBJ;AuCjoBE;EAEE;UAAA;AvCmoBJ;AwCzlBE;EACE;AxC4lBJ;AyCrpBE;EACE;AzCwpBJ;AC1eE;EACE,gBAlMU;EAmMV,eApMQ;EAqMR;AD6eJ;AC1eE;EAEE;AD4eJ;ACzeE;EACE;AD4eJ;AE3gBE;ECxGE;EAcF;ED4FE;AF+gBJ;AE5gBE;EC7GE;EAcF;EDiGE;AFghBJ;AE7gBE;EClHE;EAcF;EDsGE;AFihBJ;AE9gBE;ECvHE;EAcF;ED2GE;AFkhBJ;AE5gBE;EC/HE;EDwIA;AFwgBJ;AErgBE;EC3IE;EDoJA;AFigBJ;AE9fE;ECvJE;EAcF;AH4oBF;AE/fE;EC3JE;EAcF;AHipBF;AEjgBI;EACE;AFmgBN;AE/fE;ECnKE;EAcF;AHypBF;AEhgBE;ECvKE;EAcF;ED2JE;AFogBJ;AEjgBE;EC5KE;EAcF;EDgKE;AFqgBJ;AElgBE;ECjLE;EAcF;EDqKE;AFsgBJ;AEngBE;ECtLE;EAcF;ED0KE;AFugBJ;AI7vBE;ED8DE;EAcF;AHsrBF;AK/mBE;;EAGI;EACA;EACA;ALinBN;AMrsBE;EACE;ANwsBJ;AOnwBE;EACE;APswBJ;AOnwBE;EAEI;EACA;APqwBN;AOjwBE;EACE;APowBJ;AOjwBE;;EAEE;APowBJ;AQ9sBE;EACE;ARitBJ;AQ7sBE;EACE;ARgtBJ;AS9tBE;EACE;EACA;ATiuBJ;AS/tBI;;EAEE,eA7FkB;AT8zBxB;AU/xBE;EACE;AVkyBJ;AU/xBE;EACE;EACA;AVkyBJ;AU/xBE;EACE;AVkyBJ;AW1pBE;EACE;AX6pBJ;AW1pBE;EACE,eA/KsB;AX40B1B;AW1pBE;;EAGI;EACA;AX4pBN;AWxpBE;EAEI,eA3L6B;EA4L7B;AX0pBN;AY/0BE;ET6DE;EAcF;AHywBF;Aa/yBE;EAEI;EACA;EACA;AbizBN;Aa7yBE;EVgBE;EAcF;AHoxBF;AchtBE;EX3FE,kBAiBU;EAhBV,gBAiBY;EAhBZ,kBAiBY;EAhBZ,iDAiBY;EAGd;AH4xBF;AcptBE;EACE,yBAPuB;Ad8tB3B;AcjtBI;;EACE,eAvB2B;EAwB3B,kBAxCU;Ad6vBhB;AcjtBI;;EACE;EACA;AdotBN;AcltBM;;EACE;EACA,kBAlDQ;AduwBhB;AchtBE;EACE;EAEA;AdktBJ;Ac9sBI;;EAzEF;EAEA;Ad2xBF;Ac5sBI;EAjFF;EAEA;Ad+xBF;AczsBE;EACE;EACA,sBApEiB;AdgxBrB;AczsBE;EACE;Ad4sBJ;AczsBE;EAGE,iBAhEuB;Ad0wB3B;AcvsBE;EACE,cA/EoB;EAgFpB,0BAzEqB;EA6ErB;AdusBJ;Ae70BI;EACE,sBAJqB;Afo1B3B;Ae70BI;EACE;Af+0BN;Ae30BM;;EA7DJ;EAIA;EAGA;Afu4BF;Ae10BM;EApEJ;EAIA;EAGA;Af44BF;Aev0BM;EA5EJ;EAIA;EAGA;Afi5BF;Aer0BI;EACE;Afu0BN;Aep0BI;EAGE,cAzCqB;Af62B3B;Aej0BI;EACE,0BAjDmB;EAqDnB;Afg0BN;Ae1zBE;EAGM;;IA3FN;Efw5BA;EetzBM;IAlGN;Ef25BA;EejzBM;IA1GN;Ef85BA;AACF;AgBj5BI;EACE;AhBm5BN;AgBh5BI;EACE;EACA,kBAT2B;AhB25BjC;AgB94BM;;EAnCJ;EAEA;AhBo7BF;AgB14BM;EA5CJ;EAEA;AhBw7BF;AiBn4BI;EACE;AjBs4BN;AiBn4BI;EACE;EACA,mBAT8B;AjB84BpC;AiBj4BM;;EA1CJ;EAEA;AjB86BF;AiB73BM;EAnDJ;EAEA;AjBk7BF;AkBt/BE;;EAGE;AlBw/BJ;AmB5/BE;;EARA;EACA;EACA;EAQE;EACA;AnBigCJ;AmB9/BI;;EACE,eDJwB;AlBqgC9B;AoBt8BE;EACE;ApBy8BJ;AqBv+BE;EAEI;EACA;EACA;ArBy+BN;AsBh/BE;;EAGI;EACA;AtBk/BN;AuB19BE;EACE;AvB69BJ;AwB/9BE;EACE;AxBk+BJ;AwB/9BE;EACE;AxBk+BJ;AyBh+BE;EACE;AzBm+BJ;A0Bt4BE;EAEI;EACA;EACA;A1Bw4BN;A2Br8BE;EACE;A3Bw8BJ;A2Br8BE;EAEI;EACA;A3Bu8BN;A2Bn8BE;EACE;A3Bs8BJ;A2Bn8BE;EACE;A3Bs8BJ;A2Bn8BE;EAEI;EACA;A3Bq8BN;A4B57BE;EACE;A5B+7BJ;A4B57BE;EAEI;EACA;EACA;A5B87BN;A6BhhCE;;;;;;;E1BUE;EAcF;E0BhBE;A7BohCJ;A8B1kCE;EACE;EACA,eAtBQ;EAuBR,gBAtBe;EAuBf,mBAvBe;A9BomCnB;A8B1kCE;EACE,eAxBgB;EAyBhB,gBAvBA;EAwBA,mBAxBA;A9BqmCJ;A+BhkCE;EACE,iDAHY;A/BskChB;A+BhkCE;EACE,iDAPY;A/B0kChB;A+B9jCI;EACE;A/BikCN;AmBnnCE;EARA;EACA;EACA;EAQE;EACA;AnBunCJ;AmBpnCI;EACE,eY4C0B;A/B0kChC;A+BvkCI;EACE;A/BykCN;AmBhoCE;EARA;EACA;EACA;EAQE;EACA;AnBooCJ;AmBjoCI;EACE,eYiD0B;A/BklChC;A+B/kCI;EACE;EACA;EACA;A/BilCN;A+B3kCI;EACE;A/B8kCN;AmBnpCE;EARA;EACA;EACA;EAQE;EACA;AnBupCJ;AmBppCI;EACE,eY+D0B;A/BulChC;A+BplCI;EACE;A/BslCN;AmBhqCE;EARA;EACA;EACA;EAQE;EACA;AnBoqCJ;AmBjqCI;EACE,eYoE0B;A/B+lChC;A+B5lCI;EACE,iDA1CU;EA2CV;EACA;A/B8lCN;AgCtoCE;EAEI;EACA;AhCwoCN;AiC1qCE;E9B8DE;EAcF;AHmmCF;AkCvqCE;EAEI;EACA;AlCyqCN;AkCrqCE;EACE;EAEE;EACA;EACA;AlCuqCN;AmCvrCE;EACE;AnC0rCJ;AmCvrCE;;EAEE;EACA;AnC0rCJ;AoCrtCE;EACE;EAIA;ApCqtCJ;AoC9sCI;EACE;ApCgtCN;AoC5sCE;EACE;ApC+sCJ;AoC5sCE;EACE;EACA;EACA;EAEA;EACA;ApC8sCJ;AqCvsCI;EDHE;ApC6sCN;AqC9uCE;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAIA;EAGA;EAGA;EACA;ArC0uCJ;AsChvCE;EAEE;EAGA;EACA;EACA;EACA;AtCgvCJ;AsC5uCE;EACE;EACA,aA3BwB;AtC0wC5B;AsC7uCI;EAGE;AtC6uCN;AsCruCE;EACE;EACA;EACA,aA1Cc;AtCkxClB;AsCpuCE;EAGE;EACA;EACA;EACA,aApDc;EAwDd;EACA;EACA;AtCkuCJ;AsC/tCE;EAEE;EACA;EACA;EACA;EACA;EAEA,aApEuB;EAqEvB;EACA;EACA;EACA;AtCguCJ;AsC9tCI;EACE;AtCguCN;AsC3tCM;EAGE;AtC2tCR;AsCttCE;EACE,+BAtFqB;AtC+yCzB;AsCjtCI;EACE;AtCotCN;AsC9sCE;EACE;EACA,aA3Gc;EAgHd;EAIA;EAGA;EACA;AtCwsCJ;AsCpsCE;EACE;EAKA;EAKA;AtC+rCJ;AuCt0CE;EACE;AvCy0CJ;AuCn0CE;EAyCA;EACA;EAxCE;EACA;AvCu0CJ;AuC9zCE;EA6BA;EACA;EA5BE;AvCk0CJ;AuCxzCE;EAA0C;AvC4zC5C;AuC3zCE;EAAwC;AvC8zC1C;AuC5zCE;EAEE;UAAA;AvC6zCJ;AuC1zCE;EAEE;UAAA;AvC4zCJ;AwClxCE;EACE;AxCqxCJ;AyC90CE;EACE;AzCi1CJ;A0Ct2CE;EAII;A1Cs2CN;AgCx2CE;EACE;AhC22CJ;AgCz2CI;EAEE;AhC02CN;AgCt2CI;EACE;AhCw2CN;AgCr2CI;EACE;EACA;AhCu2CN;AgCp2CI;EACE;AhCs2CN;AgCl2CE;EACE;AhCq2CJ;AgCl2CE;EACE;AhCq2CJ;AgCl2CE;EACE;AhCq2CJ;AiCz4CE;EACE;AjC44CJ;AiCz4CE;EACE;AjC44CJ;A2Cv4CE;EACE;A3C04CJ;A2Cx4CI;EACE;A3C04CN;A2Ct4CE;EACE,cAZe;A3Cq5CnB;A2Ct4CE;;EAEE;A3Cy4CJ;A2Cj4CE;;;;EAIE;A3Co4CJ;A2Cj4CE;;EAEE;A3Co4CJ;A2C/3CI;;EACE,mBAxCa;A3C26CnB;A4C56CE;EAIE;EACA;A5C46CJ;A4Cr6CI;ECkIF;A7CuyCF;A4Cz6CI;ECkIF;A7C2yCF;A4C76CI;ECkIF;A7C+yCF;A4Cj7CI;ECkIF;A7CmzCF;A4Cr7CI;ECkIF;A7CuzCF;A4Cz7CI;ECkIF;A7C2zCF;A4C77CI;ECkIF;A7C+zCF;A4Cj8CI;ECkIF;A7Cm0CF;A4Cr8CI;ECkIF;A7Cu0CF;A4Cz8CI;ECkIF;A7C20CF;A4C78CI;ECkIF;A7C+0CF;A4Cj9CI;ECkIF;A7Cm1CF;A4Cr9CI;ECkIF;A7Cu1CF;A4Cz9CI;ECkIF;A7C21CF;A4C79CI;ECkIF;A7C+1CF;A4Cj+CI;ECkIF;A7Cm2CF;A4Cr+CI;ECkIF;A7Cu2CF;A4Cz+CI;ECkIF;A7C22CF;A4C7+CI;ECkIF;A7C+2CF;A4Cj/CI;ECkIF;A7Cm3CF;A4Cr/CI;ECkIF;A7Cu3CF;A4Cz/CI;ECkIF;A7C23CF;A4C7/CI;ECkIF;A7C+3CF;A4CjgDI;ECkIF;A7Cm4CF;A4CrgDI;ECkIF;A7Cu4CF;A4ClgDI;EACE;A5CqgDN;A8C/hDE;EAEE;EACA;A9CiiDJ;A6Cr4CE;EAXA;A7Cm5CF;A8C7hDI;EACE;A9C+hDN;A8C7hDM;EACE;A9C+hDR;ACl9CE;EACE;ADq9CJ;ACj9CI;EACE;ADo9CN;ACh9CE;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;ADm9CJ;ACh9CE;;EAEE;ADm9CJ;AC98CE;EAEE;ADg9CJ;AC7jDE;EACE,WATS;EAUT,YAVS;EAWT,iBAXS;AD2kDb;AC5jDI;EACE;AD8jDN;ACzjDI;EACE;AD2jDN;ACtjDI;EACE;ADwjDN;ACnjDI;EACE;EACA;ADqjDN;AChjDI;EACE;ADkjDN;AC7iDI;EACE;EACA;AD+iDN;ACziDM;EACE;AD2iDR;ACtiDM;EACE;EACA;ADwiDR;ACniDM;EACE;ADqiDR;AChiDM;EACE;EACA;ADkiDR;ACrmDE;EACE,WAVW;EAWX,YAXW;EAYX,iBAZW;ADonDf;ACpmDI;EACE;ADsmDN;ACjmDI;EACE;ADmmDN;AC9lDI;EACE;ADgmDN;AC3lDI;EACE;EACA;AD6lDN;ACxlDI;EACE;AD0lDN;ACrlDI;EACE;EACA;ADulDN;ACjlDM;EACE;ADmlDR;AC9kDM;EACE;EACA;ADglDR;AC3kDM;EACE;AD6kDR;ACxkDM;EACE;EACA;AD0kDR;AC7oDE;EACE,WARS;EAST,YATS;EAUT,iBAVS;AD0pDb;AC5oDI;EACE;AD8oDN;ACzoDI;EACE;AD2oDN;ACtoDI;EACE;ADwoDN;ACnoDI;EACE;EACA;ADqoDN;AChoDI;EACE;ADkoDN;AC7nDI;EACE;EACA;AD+nDN;ACznDM;EACE;AD2nDR;ACtnDM;EACE;EACA;ADwnDR;ACnnDM;EACE;ADqnDR;AChnDM;EACE;EACA;ADknDR;AChjDE;EACE;EACA;ADmjDJ;AqC1qDI;EpC0HE;EACA;ADmjDN;AC9iDI;EACE;EACA;ADijDN;AC5iDI;EACE;EACA;AD+iDN;AC1iDI;EAWI;EAMF;AD8hDN;AIztDE;EyCkJA;EzChJE;EACA;AJ4tDJ;AK1oDE;EAKE;EACA;ALyoDJ;AKzqDE;EACE;AL2qDJ;AKzqDE;EACE;AL2qDJ;AKzqDE;EACE;AL2qDJ;AKvqDI;EAEE;ALwqDN;AK3uDE;EACE;AL6uDJ;AK1uDE;EACE;AL4uDJ;AKzuDE;EACE;AL2uDJ;AKxuDE;EACE;AL0uDJ;AKzpDI;EACE,YAxGY;EAyGZ;AL2pDN;AKvpDE;EACE;AL0pDJ;AKrpDE;EACE;ALwpDJ;AKrpDE;EAEE;EACA;ALupDJ;AKltDE;EACE;ALotDJ;AKltDE;EACE;ALotDJ;AKltDE;EACE;ALotDJ;AKhtDI;EAEE;ALitDN;AK9tDE;EACE;ALguDJ;AK9tDE;EACE;ALguDJ;AK9tDE;EACE;ALguDJ;AK5tDI;EAEE;AL6tDN;AK/vDE;EAXA,0CADmB;AL8wDrB;AK9vDE;EAfA,0CADmB;ALixDrB;AK7vDE;EAnBA,0CADmB;ALoxDrB;A6CjpDE;EAXA;A7CgqDF;A6CrpDE;EAXA;A7CoqDF;A6CzpDE;EAXA;A7CuqDF;A6C5pDE;EAXA;A7C0qDF;A6C/pDE;EAXA;A7C8qDF;A6CnqDE;EAXA;A7CirDF;A6CtqDE;EAXA;A7CorDF;AMn0DE;;EuC+IA;A7CyrDF;AMn0DE;;EAEE;ANs0DJ;AMn0DE;EACE;ANs0DJ;AMp0DI;EACE;ANs0DN;AMl0DE;EACE;EACA;ANq0DJ;AMn0DI;EACE;ANq0DN;AMj0DE;EACE;ANo0DJ;AMj0DE;EACE;EACA;ANo0DJ;AMh0DI;EACE;EACA;EACA;ANm0DN;AM/zDE;EACE;EACA;ANk0DJ;AMh0DI;EACE;ANk0DN;AM9zDE;EACE;EACA;ANi0DJ;AM/zDI;EACE;ANi0DN;AM9zDI;EACE;ANg0DN;AM5zDE;;EAEE;AN+zDJ;AM7yDI;EACE,iBALc;ANqzDpB;AOz4DE;EAEE;EACA;AP24DJ;A6ClvDE;EAXA;A7CgwDF;A6CrvDE;EAXA;A7CmwDF;AOz4DE;EACE;AP44DJ;AQ14DE;EACE;AR64DJ;AQ14DE;EACE,aAdoB;AR25DxB;AQ14DE;EAGE;AR24DJ;AQx4DE;EACE,yBAxBoB;ARm6DxB;AQv4DI;EACE;AR04DN;AQv4DI;EACE;ARy4DN;AQt4DI;EACE;ARw4DN;AQj4DM;EACE,yBAtCW;AR06DnB;AQ/3DM;EACE,qBA5CW;AR66DnB;AQ73DI;EACE;AR+3DN;AQz3DE;EACE;AR43DJ;AQv3DI;;EACE;AR23DN;AQx3DI;;EACE;AR23DN;AQx3DI;;EACE;AR23DN;ASn6DE;EA5CA,yBAyCwB;EAxCxB,0BAyCwB;AT06D1B;ASj9DE;EACE,0BAsCsB;EArCtB;ATm9DJ;ASx6DM;EoCmGJ;A7Cw0DF;ASv6DM;EACE;ATy6DR;ASr6DI;EACE;ATu6DN;ASp6DI;EACE;ATs6DN;ASj6DI;EAnEF,yBAyBE;EAxBF,YAuBwB;ATi9D1B;ASt+DE;EACE,YAoBsB;EAnBtB;ATw+DJ;ASl9DE;EAVA,0CADmB;ATg+DrB;ASz6DI;EAvEF,yBAyBE;EAxBF,YAuBwB;AT49D1B;ASj/DE;EACE,YAoBsB;EAnBtB;ATm/DJ;AS79DE;EAVA,0CADmB;AT2+DrB;ASh7DI;EA3EF,yBAyBE;EAxBF,YAuBwB;ATu+D1B;AS5/DE;EACE,YAoBsB;EAnBtB;AT8/DJ;ASx+DE;EAVA,0CADmB;ATs/DrB;AUtgEE;EACE;AVygEJ;AUtgEE;;;;EAIE;AVygEJ;AUtgEE;;EAEE;AVygEJ;AUtgEE;EACE;AVygEJ;AUtgEE;EACE;AVygEJ;AWp+DE;EACE;AXu+DJ;AWl+DE;;;EAGE;AXq+DJ;AWl+DE;EACE;AXq+DJ;AWl+DE;;EAEE;AXq+DJ;AWl+DE;;EAEE;EACA;AXq+DJ;AWxgEE;EAwCI,0BA/Ba;AXmgEnB;AWh+DE;EACE,0BApCe;AXugEnB;AWh+DE;EAOI;AX69DN;AWphEE;EAkEI;AXs9DN;AWxhEE;EA2EM;AXi9DR;AW/3DE;EACE,kCApMA;AXskEJ;AW/3DE;;EAEE,kCAViB;AX44DrB;AW/3DE;;EAEE;AXk4DJ;AW/3DE;;EAEE;AXk4DJ;AW/3DE;;EAEE,mBAxBc;AX05DlB;AW/3DE;;EAEE,mBA5BuB;AX85D3B;AW7lEE;EACE;EACA;AXgmEJ;AW7lEE;EAII;AX6lEN;AWplEE;EACE;AXulEJ;AWtkEE;;;EARM;AXolER;AWn/DE;EkCWA;ElCTE;EACA;AXs/DJ;AWr7DE;EACE,kCApMA;AX2nEJ;AWp7DE;;EAEE,kCAViB;AXg8DrB;AWn7DE;;EAEE;AXq7DJ;AWl7DE;;EAEE;AXo7DJ;AWj7DE;;EAEE,mBAxBc;AX28DlB;AWh7DE;;EAEE,mBA5BuB;AX88D3B;AW7oEE;EACE;EACA;AX+oEJ;AW5oEE;EAII;AX2oEN;AWloEE;EACE;AXooEJ;AWnnEE;;;EARM;AXgoER;AW39DE;EACE,kCApMA;AXiqEJ;AW19DE;;EAEE,kCAViB;AXs+DrB;AWz9DE;;EAEE;AX29DJ;AWx9DE;;EAEE;AX09DJ;AWv9DE;;EAEE,mBAxBc;AXi/DlB;AWt9DE;;EAEE,mBA5BuB;AXo/D3B;AWnrEE;EACE;EACA;AXqrEJ;AWlrEE;EAII;AXirEN;AWxqEE;EACE;AX0qEJ;AWzpEE;;;EARM;AXsqER;AWvjEE;EkCHA;A7C8jEF;AWvjEE;EACE;AX0jEJ;AWxjEI;EACE;AX0jEN;AWvjEI;EACE;AXyjEN;AWrjEE;EACE;AXwjEJ;AY7tEE;EiCiJA;EjC/IE;EACA;AZguEJ;A+CxuEE;EACE;A/C2uEJ;A+CxuEE;EACE;A/C2uEJ;AazuEE;EAEE;EACA;Ab2uEJ;A6CplEE;EAXA;A7CkmEF;Aa3uEE;EACE;Ab8uEJ;AgD9vEM;EnCoBF;Ab8uEJ;AazuEE;EACE;IAEE;Eb2uEJ;AACF;AaxuEE;EACE;Ab0uEJ;AavuEE;;EAEE;Ab0uEJ;AavuEE;EACE;Ab0uEJ;AaxuEI;;EAEE;Ab0uEN;Aa7sEI;EACE,YALe;AbqtErB;Aa9sEM;EACE,YAVY;Ab0tEpB;AclwEE;EACE,yBAZA;AdixEJ;AclwEE;EACE,yBAhBA;AdqxEJ;AclwEE;EACE,cAnBoB;AdwxExB;AcnwEI;EACE,cAhBqB;AdqxE3B;AclwEI;EACE,cAnBmB;AduxEzB;AchwEE;EACE,cA9BqB;AdiyEzB;AchwEE;EACE,qCA9BA;AdiyEJ;Ac/vEI;EACE,yBAhCsB;AdkyE5B;AchwEM;EACE,yBArCmB;AduyE3B;Ac/vEM;EACE,yBAxCiB;AdyyEzB;Ac3vEI;EACE,cA9CsB;Ad4yE5B;Ac3vEI;EACE,cApDqB;AdizE3B;Ac1vEI;EACE,cAvDmB;AdmzEzB;AcpvEI;EACE,cAhEmB;AduzEzB;AcrvEM;;EAEE,cApEiB;Ad2zEzB;AcnvEI;;EAEE,yBA1EmB;Ad+zEzB;AcjvEE;EACE,cA/EqB;Adm0EzB;Ae90EI;EACE,0BANU;Afu1EhB;Ae90EI;EACE,0BAVU;Af01EhB;Ae70EI;EACE,qCAZF;Af21EJ;Ae50EI;EkCzBF;EACA;EACA;AjDw2EF;AkDl2EI;EACE,qCAJF;AlDy2EJ;AkDl2EI;EDZF;EACA;EACA;AjDi3EF;AgBn2EI;EACE,qCATF;AhB+2EJ;AgBn2EI;EACE,qCAXF;AhBg3EJ;AgBl2EI;EACE,qCAbF;AhBi3EJ;AgBh2EM;EACE,0BAjBiB;AhBm3EzB;AgB/1EM;EACE;AhBi2ER;AiB72EI;EACE,0BAXF;AjB23EJ;AiB72EI;EACE,0BAbF;AjB43EJ;AiB32EM;EACE,cAjBkB;AjB83E1B;AiB12EM;EACE,cApBiB;AjBg4EzB;AiBz2EM;EACE,cAvBe;AjBk4EvB;AiBr2EM;EACE,cA9Be;AjBq4EvB;AiBl2EM;EACE,0BA3CiB;AjB+4EzB;AiBj2EM;EACE,0BAtCJ;AjBy4EJ;AmDv5EI;EACE;AnD05EN;AmDv5EI;EACE;AnDy5EN;AmDt5EI;EACE;AnDw5EN;AoB55EE;EACE;ApB+5EJ;AoB55EE;;EAEE;ApB+5EJ;AoB55EE;EACE;ApB+5EJ;AoDj7EE;EhCqBI;ApB+5EN;AoDp7EE;EhCqBI;ApB+5EN;AoDh7EE;EhCiBI;ApBk6EN;AoD/6EE;EhCaI;ApBq6EN;AoD96EE;EhCSI;ApBw6EN;AoBn5EE;EACE;ApBs5EJ;AoBn5EE;;EAEE;ApBs5EJ;AoBn5EE;EACE;ApBs5EJ;A+Bt8EI;EACE;A/By8EN;A+Bt8EI;EACE;A/Bw8EN;A+Br8EI;EACE;A/Bu8EN;A+Bn8EE;EACE;A/Bs8EJ;A+Bh8EI;;;;;EACE;A/Bu8EN;A+Bl8EI;EACE;A/Bq8EN;AqBj+EE;EAEE;ArBm+EJ;A6Cz0EE;EAXA;A7Cu1EF;AqBn+EE;EACE;EACA;ArBs+EJ;AqBn+EM;;;EAGE;ArBq+ER;AqBh+EE;;EAEE;ArBm+EJ;AqB59EI;;;;EACE;ArBk+EN;AsB9/EE;EACE;AtBigFJ;AsB9/EE;;EAEE;AtBigFJ;AsB9/EE;;EAEE;EACA;AtBigFJ;AsB9/EE;;EAEE;AtBigFJ;AsB7/EI;;;;EAIE;AtBggFN;AsBz+EI;EACE,gBALK;AtBi/EX;AqDlhFE;EACE;ArDqhFJ;AqDlhFE;EACE;ArDqhFJ;AqDlhFE;EACE;ArDqhFJ;AqDjhFI;EACE;ArDohFN;AqDjhFI;EACE;ArDmhFN;AqDhhFI;EACE;ArDkhFN;AqD7gFI;EACE;ArDghFN;AqD7gFI;EACE;ArD+gFN;AqD5gFI;EACE;ArD8gFN;AsD/jFI;EACE;AtDkkFN;AsD/jFI;EACE;AtDikFN;AsD9jFI;EACE;AtDgkFN;AuBzjFE;EACE;AvB4jFJ;AuBjlFE;EACE;AvBolFJ;AuBjlFE;;EAIE;AvBilFJ;AuBzlFE;EACE;AvB2lFJ;AuBxlFE;;EAIE;AvBwlFJ;AuBhmFE;EACE;AvBkmFJ;AuB/lFE;;EAIE;AvB+lFJ;AuB9jFM;;EAEE;AvBgkFR;AuB7jFM;;EAEE;AvB+jFR;AuB5jFM;EACE;AvB8jFR;AuBxjFI;EACE;AvB0jFN;AwB3mFE;EACE;AxB8mFJ;AwB3mFE;EACE;AxB8mFJ;AwB3mFE;EACE;AxB8mFJ;AwB3mFE;EACE;AxB8mFJ;AwB3mFE;EACE;AxB8mFJ;A6Cv+EE;EAXA;A7Cq/EF;AwB9mFI;EACE;AxBgnFN;AwB1mFM;EACE;AxB6mFR;AwB1mFM;EACE;AxB4mFR;AwBzmFM;EACE;AxB2mFR;AwBvmFI;EACE;AxBymFN;AwBtmFI;EACE;AxBwmFN;AuDlpFE;EACE,yBALmC;EAMnC;AvDqpFJ;AuDlpFE;EACE,uBAXwB;EAYxB;AvDqpFJ;AuDnpFI;EACE,uBAb2B;AvDkqFjC;AuDlpFI;EV6HF;A7CwhFF;AuD9oFE;EACE,2CAvBmB;AvDwqFvB;AuD/oFI;EACE,0CA1BiB;EA2BjB;AvDipFN;AuD7oFE;EACE,0CAhCmB;EAiCnB;AvDgpFJ;AuD9oFI;EACE;EACA,2CArCiB;AvDqrFvB;AuD5oFE;EAQI;AvDwoFN;AyBjsFI;EACE;AzBosFN;AyBjsFI;EAGE;AzBisFN;AyB9rFI;EAGE;AzB8rFN;AyB3sFI;EACE;AzB6sFN;AyB1sFI;EAGE;AzB0sFN;AyBvsFI;EAGE;AzBusFN;AyBptFI;EACE;AzBstFN;AyBntFI;EAGE;AzBmtFN;AyBhtFI;EAGE;AzBgtFN;AyB3qFI;EAGE,uBAhBqB;AzB2rF3B;AyBvqFE;EoB2FA;EpBzFE;AzB0qFJ;AyBvqFE;EACE,qCA3BoB;AzBqsFxB;A0BhsFE;EACE,qCAbqB;A1BgtFzB;A0B/uFE;;;EAGE;A1BkvFJ;A0B/uFE;EACE;A1BivFJ;A0B9uFE;EAGE,wCADQ;A1B+uFZ;A0B3vFE;;;EAGE;A1B8vFJ;A0B3vFE;EACE;A1B6vFJ;A0B1vFE;EAGE,wCADQ;A1B2vFZ;A0BvwFE;;;EAGE;A1B0wFJ;A0BvwFE;EACE;A1BywFJ;A0BtwFE;EAGE,wCADQ;A1BuwFZ;A0BttFI;;EACE,qCA9B2B;A1BwvFjC;A0BrtFI;;;EAGE,qCArCwB;A1B6vF9B;A0BptFM;EACE,qCA1CsB;A1BgwF9B;A0BhtFI;EAGE,qCADQ;A1BktFd;A0BvsFM;;EAEE,qCA7DJ;A1BswFJ;A0BrsFQ;;EAEE,qCAjEN;A1BwwFJ;A0BjsFM;EACE,iCA9EiB;EA+EjB;A1BmsFR;A0B9rFQ;EACE,iCApFuB;A1BoxFjC;A0B7rFQ;EACE,iCAvFoB;A1BsxF9B;A0BzrFE;EACE,gCAvFA;A1BmxFJ;A0BnrFE;EACE;EAIA;A1BmrFJ;A0BzqFE;EACE;A1B4qFJ;A2B1zFI;EAIE;A3B0zFN;A2BvzFI;EACE;A3ByzFN;A2BnzFI;EACE;IACE;E3BqzFN;AACF;A2BlzFI;;EAIE;A3BkzFN;A2B/yFI;EAGE;EACA;A3B+yFN;A2B5yFI;;;EAGE;EACA;A3B8yFN;A2B1yFM;EACE;A3B4yFR;A2BzyFM;;;EAGE;EACA;A3B2yFR;A2BtyFM;EACE;A3BwyFR;A2BryFM;;;EAGE;EACA;A3BuyFR;A2BnyFI;EACE;EACA;A3BqyFN;A2BlyFI;EACE;A3BoyFN;A2BjyFI;EACE;A3BmyFN;A2B/xFE;EACE;A3BkyFJ;A2B/xFE;EACE;A3BkyFJ;A2B/xFE;;;EAGE;A3BkyFJ;A2BzvFI;EACE,YANK;A3BkwFX;A2BzvFI;;EAEE;A3B4vFN;A2BvvFI;EACE;EACA;A3B0vFN;A2BrvFM;EACE;A3BwvFR;A2BnvFI;EACE;A3BsvFN;AwD35FE;EAYI;AxDm5FN;A4B35FE;;EAEE,4CAJc;A5Bk6FlB;A4B15FI;;EAEE,yCAVY;EAWZ;A5B65FN;A4Bz5FE;EACE;A5B45FJ;A4B15FI;EACE;A5B45FN;A4Bx5FE;EACE;A5B25FJ;A4Bx5FE;EACE;A5B25FJ;A4Bv5FE;;EAEE;EACA;A5B05FJ;A4B52FM;;;;;EACE;A5Bm3FR;A4B93FE;EACE;A5Bg4FJ;A4Bj4FE;EACE;A5Bm4FJ;A4B13FM;;;;;EACE;A5Bg4FR;A4B34FE;EACE;A5B64FJ;A4B94FE;EACE;A5Bg5FJ;A4Bv4FM;;;;;EACE;A5B64FR;A4Bx5FE;EACE;A5B05FJ;A4B35FE;EACE;A5B65FJ;A4Bp5FM;;;;;EACE;A5B05FR;A4B/4FE;EACE;A5Bi5FJ;A4B74FE;EACE;A5B+4FJ;A4B74FI;EACE;A5B+4FN;A4B14FE;;;;;;;EAIE;A5B+4FJ;A4B54FE;;;EAGE;EACA;A5B84FJ;A4Bz4FE;;;;;EAIE;EACA;A5B44FJ;A4B37FM;;;;;EACE;A5Bi8FR;A4Bt7FE;EACE;A5Bw7FJ;A4Bp7FE;EACE;A5Bs7FJ;A4Bp7FI;EACE;A5Bs7FN;A4Bj7FE;;;;;;;EAIE;A5Bs7FJ;A4Bn7FE;;;EAGE;EACA;A5Bq7FJ;A4Bh7FE;;;;;EAIE;EACA;A5Bm7FJ;A4Bl+FM;;;;;EACE;A5Bw+FR;A4B79FE;EACE;A5B+9FJ;A4B39FE;EACE;A5B69FJ;A4B39FI;EACE;A5B69FN;A4Bx9FE;;;;;;;EAIE;A5B69FJ;A4B19FE;;;EAGE;EACA;A5B49FJ;A4Bv9FE;;;;;EAIE;EACA;A5B09FJ;A6BpjGE;EACE;EACA;A7BujGJ;A6BrjGI;EApCF;EACA;A7B4lGF;A6BrjGI;EAxCF;EACA;A7BgmGF;A6BrjGI;EA5CF;EACA;A7BomGF;A6BhmGE;;;EAGE;A7BkmGJ;A6B/lGE;;;;;EAKE;A7BimGJ;A6B9lGE;EACE;A7BgmGJ;A6B7nGE;EACE,gBA6Ee;A7BmjGnB;A6B9nGE;EACE,YA0Ee;A7BujGnB;A6B3iGI;EA1FF;IACE,gBA+Ec;E7B0jGhB;;E6BvoGA;IACE,YA4Ec;E7B8jGhB;AACF;A8BroGE;EACE;A9BuoGJ;AmC/oGE;EACE;AnCkpGJ;AmC/oGE;;EAEE;AnCkpGJ;AmC1nGI;EACE,gBALK;AnCkoGX;AkC5pGE;EAGE;EACA;EW6IF;A7CihGF;AkCzpGE;EACE;AlC4pGJ;AApqGA;;EAEE;EACA,yBANqB;EAOrB,0BANqB;EAOrB;AAuqGF;AAnqGE;EACE;AAsqGJ;AApqGI;EACE;EACA;EACA;AAsqGN;AApqGM;EACE;EACA;EACA;AAsqGR;AApqGQ;EACE;AAsqGV;A0ChsGE;EAII;A1CgsGN;AgClsGE;EACE;AhCosGJ;AgClsGI;EAEE;AhCmsGN;AgC/rGI;EACE;AhCisGN;AgC9rGI;EACE;EACA;AhCgsGN;AgC7rGI;EACE;AhC+rGN;AgC3rGE;EACE;AhC6rGJ;AgC1rGE;EACE;AhC4rGJ;AgCzrGE;EACE;AhC2rGJ;AiC/tGE;EACE;AjCiuGJ;AiC9tGE;EACE;AjCguGJ;A2C3tGE;EACE;A3C6tGJ;A2C3tGI;EACE;A3C6tGN;A2CztGE;EACE,cAZe;A3CuuGnB;A2CxtGE;;EAEE;A3C0tGJ;A2CltGE;;;;EAIE;A3CotGJ;A2CjtGE;;EAEE;A3CmtGJ;A2C9sGI;;EACE,mBAxCa;A3CyvGnB;A4C1vGE;EAIE;EACA;A5CyvGJ;A4ClvGI;ECkIF;A7CmnGF;A4CrvGI;ECkIF;A7CsnGF;A4CxvGI;ECkIF;A7CynGF;A4C3vGI;ECkIF;A7C4nGF;A4C9vGI;ECkIF;A7C+nGF;A4CjwGI;ECkIF;A7CkoGF;A4CpwGI;ECkIF;A7CqoGF;A4CvwGI;ECkIF;A7CwoGF;A4C1wGI;ECkIF;A7C2oGF;A4C7wGI;ECkIF;A7C8oGF;A4ChxGI;ECkIF;A7CipGF;A4CnxGI;ECkIF;A7CopGF;A4CtxGI;ECkIF;A7CupGF;A4CzxGI;ECkIF;A7C0pGF;A4C5xGI;ECkIF;A7C6pGF;A4C/xGI;ECkIF;A7CgqGF;A4ClyGI;ECkIF;A7CmqGF;A4CryGI;ECkIF;A7CsqGF;A4CxyGI;ECkIF;A7CyqGF;A4C3yGI;ECkIF;A7C4qGF;A4C9yGI;ECkIF;A7C+qGF;A4CjzGI;ECkIF;A7CkrGF;A4CpzGI;ECkIF;A7CqrGF;A4CvzGI;ECkIF;A7CwrGF;A4C1zGI;ECkIF;A7C2rGF;A4CtzGI;EACE;A5CwzGN;A8Cl1GE;EAEE;EACA;A9Co1GJ;A6CxrGE;EAXA;A7CssGF;A8Ch1GI;EACE;A9Ck1GN;A8Ch1GM;EACE;A9Ck1GR;AC7sGE;EACE;EACA;AD+sGJ;AqCt0GI;EpC0HE;EACA;AD+sGN;AC1sGI;EACE;EACA;AD6sGN;ACxsGI;EACE;EACA;AD0sGN;ACrsGI;EAWI;EAMF;ADwrGN;AIn3GE;EyCkJA;EzChJE;EACA;AJq3GJ;AKnyGE;EAKE;EACA;ALiyGJ;AKj0GE;EACE;ALm0GJ;AKj0GE;EACE;ALm0GJ;AKj0GE;EACE;ALm0GJ;AK/zGI;EAEE;ALg0GN;AKn4GE;EACE;ALq4GJ;AKl4GE;EACE;ALo4GJ;AKj4GE;EACE;ALm4GJ;AKh4GE;EACE;ALk4GJ;AKjzGI;EACE,YAxGY;EAyGZ;ALmzGN;AK/yGE;EACE;ALizGJ;AK5yGE;EACE;AL8yGJ;AK3yGE;EAEE;EACA;AL4yGJ;AKv2GE;EACE;ALy2GJ;AKv2GE;EACE;ALy2GJ;AKv2GE;EACE;ALy2GJ;AKr2GI;EAEE;ALs2GN;AKn3GE;EACE;ALq3GJ;AKn3GE;EACE;ALq3GJ;AKn3GE;EACE;ALq3GJ;AKj3GI;EAEE;ALk3GN;AKp5GE;EAXA,0CADmB;ALm6GrB;AKn5GE;EAfA,0CADmB;ALs6GrB;AKl5GE;EAnBA,0CADmB;ALy6GrB;A6CtyGE;EAXA;A7CozGF;A6CzyGE;EAXA;A7CuzGF;A6C5yGE;EAXA;A7C0zGF;A6C/yGE;EAXA;A7C6zGF;A6ClzGE;EAXA;A7Cg0GF;A6CrzGE;EAXA;A7Cm0GF;A6CxzGE;EAXA;A7Cs0GF;AMr9GE;;EuC+IA;A7C00GF;AMp9GE;;EAEE;ANs9GJ;AMn9GE;EACE;ANq9GJ;AMn9GI;EACE;ANq9GN;AMj9GE;EACE;EACA;ANm9GJ;AMj9GI;EACE;ANm9GN;AM/8GE;EACE;ANi9GJ;AM98GE;EACE;EACA;ANg9GJ;AM58GI;EACE;EACA;EACA;AN88GN;AM18GE;EACE;EACA;AN48GJ;AM18GI;EACE;AN48GN;AMx8GE;EACE;EACA;AN08GJ;AMx8GI;EACE;AN08GN;AMv8GI;EACE;ANy8GN;AMr8GE;;EAEE;ANu8GJ;AMr7GI;EACE,iBALc;AN47GpB;AOhhHE;EAEE;EACA;APihHJ;A6Cx3GE;EAXA;A7Cs4GF;A6C33GE;EAXA;A7Cy4GF;AO/gHE;EACE;APihHJ;AQ/gHE;EACE;ARihHJ;AQ9gHE;EACE,aAdoB;AR8hHxB;AQ7gHE;EAGE;AR6gHJ;AQ1gHE;EACE,yBAxBoB;ARoiHxB;AQxgHI;EACE;AR0gHN;AQvgHI;EACE;ARygHN;AQtgHI;EACE;ARwgHN;AQjgHM;EACE,yBAtCW;ARyiHnB;AQ9/GM;EACE,qBA5CW;AR4iHnB;AQ5/GI;EACE;AR8/GN;AQx/GE;EACE;AR0/GJ;AQr/GI;;EACE;ARw/GN;AQr/GI;;EACE;ARw/GN;AQr/GI;;EACE;ARw/GN;AShiHE;EA5CA,yBAyCwB;EAxCxB,YAyCwB;ATsiH1B;AS7kHE;EACE,YAsCsB;EArCtB;AT+kHJ;ASpiHM;EoCmGJ;A7Co8GF;ASniHM;EACE;ATqiHR;ASjiHI;EACE;ATmiHN;AShiHI;EACE;ATkiHN;AS7hHI;EAnEF,yBAyBE;EAxBF,YAuBwB;AT4kH1B;ASjmHE;EACE,YAoBsB;EAnBtB;ATmmHJ;AS7kHE;EAVA,0CADmB;AT2lHrB;ASpiHI;EAvEF,yBAyBE;EAxBF,YAuBwB;ATulH1B;AS5mHE;EACE,YAoBsB;EAnBtB;AT8mHJ;ASxlHE;EAVA,0CADmB;ATsmHrB;AS3iHI;EA3EF,yBAyBE;EAxBF,YAuBwB;ATkmH1B;ASvnHE;EACE,YAoBsB;EAnBtB;ATynHJ;ASnmHE;EAVA,0CADmB;ATinHrB;AUjoHE;EACE;AVmoHJ;AUhoHE;;;;EAIE;AVkoHJ;AU/nHE;;EAEE;AVioHJ;AU9nHE;EACE;AVgoHJ;AU7nHE;EACE;AV+nHJ;AW1lHE;EACE;AX4lHJ;AWvlHE;;;EAGE;AXylHJ;AWtlHE;EACE;AXwlHJ;AWrlHE;;EAEE;AXulHJ;AWplHE;;EAEE;EACA;AXslHJ;AWznHE;EAwCI,+BA/Ba;AXmnHnB;AWhlHE;EACE,+BApCe;AXsnHnB;AW/kHE;EAOI;AX2kHN;AWloHE;EAkEI;AXmkHN;AWroHE;EA2EM;AX6jHR;AW3+GE;EACE,kCApMA;AXirHJ;AW1+GE;;EAEE,kCAViB;AXs/GrB;AWz+GE;;EAEE;AX2+GJ;AWx+GE;;EAEE;AX0+GJ;AWv+GE;;EAEE,mBAxBc;AXigHlB;AWt+GE;;EAEE,mBA5BuB;AXogH3B;AWnsHE;EACE;EACA;AXqsHJ;AWlsHE;EAII;AXisHN;AWxrHE;EACE;AX0rHJ;AWzqHE;;;EARM;AXsrHR;AWrlHE;EkCWA;ElCTE;EACA;AXulHJ;AWthHE;EACE,mCApMA;AX4tHJ;AWrhHE;;EAEE,kCAViB;AXiiHrB;AWphHE;;EAEE;AXshHJ;AWnhHE;;EAEE;AXqhHJ;AWlhHE;;EAEE,mBAxBc;AX4iHlB;AWjhHE;;EAEE,mBA5BuB;AX+iH3B;AW9uHE;EACE;EACA;AXgvHJ;AW7uHE;EAII;AX4uHN;AWnuHE;EACE;AXquHJ;AWptHE;;;EARM;AXiuHR;AW5jHE;EACE,kCApMA;AXkwHJ;AW3jHE;;EAEE,kCAViB;AXukHrB;AW1jHE;;EAEE;AX4jHJ;AWzjHE;;EAEE;AX2jHJ;AWxjHE;;EAEE,mBAxBc;AXklHlB;AWvjHE;;EAEE,mBA5BuB;AXqlH3B;AWpxHE;EACE;EACA;AXsxHJ;AWnxHE;EAII;AXkxHN;AWzwHE;EACE;AX2wHJ;AW1vHE;;;EARM;AXuwHR;AWxpHE;EkCHA;A7C8pHF;AWvpHE;EACE;AXypHJ;AWvpHI;EACE;AXypHN;AWtpHI;EACE;AXwpHN;AWppHE;EACE;AXspHJ;AY3zHE;EiCiJA;EjC/IE;EACA;AZ6zHJ;A+Cr0HE;EACE;A/Cu0HJ;A+Cp0HE;EACE;A/Cs0HJ;Aap0HE;EAEE;EACA;Abq0HJ;A6C9qHE;EAXA;A7C4rHF;Aar0HE;EACE;Abu0HJ;AgDv1HM;EnCoBF;Abs0HJ;Aaj0HE;EACE;IAEE;Ebk0HJ;AACF;Aa/zHE;EACE;Abi0HJ;Aa9zHE;;EAEE;Abg0HJ;Aa7zHE;EACE;Ab+zHJ;Aa7zHI;;EAEE;Ab+zHN;AalyHI;EACE,YALe;AbyyHrB;AalyHM;EACE,YAVY;Ab8yHpB;Act1HE;EACE,+BAZA;Ado2HJ;Acr1HE;EACE,+BAhBA;Adu2HJ;Acp1HE;EACE,cAnBoB;Ady2HxB;Acp1HI;EACE,cAhBqB;Ads2H3B;Acn1HI;EACE,cAnBmB;Adw2HzB;Acj1HE;EACE,cA9BqB;Adi3HzB;Ach1HE;EACE,uBA9BA;Adg3HJ;Ac90HI;EACE,yBAhCsB;Adg3H5B;Ac90HM;EACE,yBArCmB;Adq3H3B;Ac70HM;EACE,yBAxCiB;Adu3HzB;Acz0HI;EACE,cA9CsB;Ady3H5B;Acx0HI;EACE,cApDqB;Ad83H3B;Acv0HI;EACE,cAvDmB;Adg4HzB;Acj0HI;EACE,cAhEmB;Adm4HzB;Acj0HM;;EAEE,cApEiB;Adu4HzB;Ac/zHI;;EAEE,yBA1EmB;Ad24HzB;Ac7zHE;EACE,cA/EqB;Ad84HzB;Aez5HI;EACE,+BANU;Afi6HhB;Aex5HI;EACE,+BAVU;Afo6HhB;Aev5HI;EACE,0CAZF;Afq6HJ;Aet5HI;EkCzBF;EACA;EACA;AjDk7HF;AkD56HI;EACE,0CAJF;AlDk7HJ;AkD36HI;EDZF;EACA;EACA;AjD07HF;AgB56HI;EACE,0CATF;AhBu7HJ;AgB36HI;EACE,2CAXF;AhBw7HJ;AgB16HI;EACE,0CAbF;AhBy7HJ;AgBx6HM;EACE,+BAjBiB;AhB27HzB;AgBv6HM;EACE;AhBy6HR;AiBr7HI;EACE,+BAXF;AjBk8HJ;AiBp7HI;EACE,YAbF;AjBm8HJ;AiBl7HM;EACE,cAjBkB;AjBq8H1B;AiBj7HM;EACE,cApBiB;AjBu8HzB;AiBh7HM;EACE,cAvBe;AjBy8HvB;AiB56HM;EACE,cA9Be;AjB48HvB;AiBz6HM;EACE,+BA3CiB;AjBs9HzB;AiBx6HM;EACE,gCAtCJ;AjBg9HJ;AmD99HI;EACE;AnDg+HN;AmD79HI;EACE;AnD+9HN;AmD59HI;EACE;AnD89HN;AoBl+HE;EACE;ApBo+HJ;AoBj+HE;;EAEE;ApBm+HJ;AoBh+HE;EACE;ApBk+HJ;AoDp/HE;EhCqBI;ApBk+HN;AoDv/HE;EhCqBI;ApBk+HN;AoDn/HE;EhCiBI;ApBq+HN;AoDl/HE;EhCaI;ApBw+HN;AoDj/HE;EhCSI;ApB2+HN;AoBj+HQ;EACE,0BqCbU;AzDg/HpB;AoBh+HQ;EACE,0BqCfW;AzDi/HrB;AoB59HE;EACE;ApB89HJ;AoB39HE;;EAEE;ApB69HJ;AoB19HE;EACE;ApB49HJ;A+B5gII;EACE;A/B8gIN;A+B3gII;EACE;A/B6gIN;A+B1gII;EACE;A/B4gIN;A+BxgIE;EACE;A/B0gIJ;A+BpgII;;;;;EACE;A/B0gIN;A+BrgII;EACE;A/BugIN;AqBniIE;EAEE;ArBoiIJ;A6C14HE;EAXA;A7Cw5HF;AqBpiIE;EACE;EACA;ArBsiIJ;AqBniIM;;;EAGE;ArBqiIR;AqBhiIE;;EAEE;ArBkiIJ;AqB3hII;;;;EACE;ArBgiIN;AsB5jIE;EACE;AtB8jIJ;AsB3jIE;;EAEE;AtB6jIJ;AsB1jIE;;EAEE;EACA;AtB4jIJ;AsBzjIE;;EAEE;AtB2jIJ;AsBvjII;;;;EAIE;AtByjIN;AsBliII;EACE,gBALK;AtByiIX;AqD1kIE;EACE;ArD4kIJ;AqDzkIE;EACE;ArD2kIJ;AqDxkIE;EACE;ArD0kIJ;AqDtkII;EACE;ArDwkIN;AqDrkII;EACE;ArDukIN;AqDpkII;EACE;ArDskIN;AqDjkII;EACE;ArDmkIN;AqDhkII;EACE;ArDkkIN;AqD/jII;EACE;ArDikIN;AsDlnII;EACE;AtDonIN;AsDjnII;EACE;AtDmnIN;AsDhnII;EACE;AtDknIN;AuB3mIE;EACE;AvB6mIJ;AuBloIE;EACE;AvBooIJ;AuBjoIE;;EAIE;AvBioIJ;AuBzoIE;EACE;AvB2oIJ;AuBxoIE;;EAIE;AvBwoIJ;AuBhpIE;EACE;AvBkpIJ;AuB/oIE;;EAIE;AvB+oIJ;AuB9mIM;;EAEE;AvBgnIR;AuB7mIM;;EAEE;AvB+mIR;AuB5mIM;EACE;AvB8mIR;AuBxmII;EACE;AvB0mIN;AwB3pIE;EACE;AxB6pIJ;AwB1pIE;EACE;AxB4pIJ;AwBzpIE;EACE;AxB2pIJ;AwBxpIE;EACE;AxB0pIJ;AwBvpIE;EACE;AxBypIJ;A6ClhIE;EAXA;A7CgiIF;AwBzpII;EACE;AxB2pIN;AwBrpIM;EACE;AxBupIR;AwBppIM;EACE;AxBspIR;AwBnpIM;EACE;AxBqpIR;AwBjpII;EACE;AxBmpIN;AwBhpII;EACE;AxBkpIN;AuD5rIE;EACE,yBALmC;EAMnC;AvD8rIJ;AuD3rIE;EACE,yBAXwB;EAYxB;AvD6rIJ;AuD3rII;EACE,yBAb2B;AvD0sIjC;AuD1rII;EV6HF;A7CgkIF;AuDtrIE;EACE,iDAvBmB;AvD+sIvB;AuDtrII;EACE,gDA1BiB;EA2BjB;AvDwrIN;AuDprIE;EACE,gDAhCmB;EAiCnB;AvDsrIJ;AuDprII;EACE;EACA,iDArCiB;AvD2tIvB;AuDlrIE;EAQI;AvD6qIN;AyBtuII;EACE;AzBwuIN;AyBruII;EAGE;AzBquIN;AyBluII;EAGE;AzBkuIN;AyB/uII;EACE;AzBivIN;AyB9uII;EAGE;AzB8uIN;AyB3uII;EAGE;AzB2uIN;AyBxvII;EACE;AzB0vIN;AyBvvII;EAGE;AzBuvIN;AyBpvII;EAGE;AzBovIN;AyB/sII;EAGE,uBAhBqB;AzB+tI3B;AyB3sIE;EoB2FA;EpBzFE;AzB6sIJ;AyB1sIE;EACE,0CA3BoB;AzBuuIxB;A0BluIE;EACE,0CAbqB;A1BivIzB;A0BhxIE;;;EAGE;A1BkxIJ;A0B/wIE;EACE;A1BixIJ;A0B9wIE;EAGE,wCADQ;A1B+wIZ;A0B3xIE;;;EAGE;A1B6xIJ;A0B1xIE;EACE;A1B4xIJ;A0BzxIE;EAGE,yCADQ;A1B0xIZ;A0BtyIE;;;EAGE;A1BwyIJ;A0BryIE;EACE;A1BuyIJ;A0BpyIE;EAGE,wCADQ;A1BqyIZ;A0BpvII;;EACE,0CA9B2B;A1BqxIjC;A0BlvII;;;EAGE,0CArCwB;A1ByxI9B;A0BhvIM;EACE,0CA1CsB;A1B4xI9B;A0B5uII;EAGE,2CADQ;A1B6uId;A0BluIM;;EAEE,uBA7DJ;A1BiyIJ;A0BhuIQ;;EAEE,0CAjEN;A1BmyIJ;A0B5tIM;EACE,sCA9EiB;EA+EjB;A1B8tIR;A0BztIQ;EACE,sCApFuB;A1B+yIjC;A0BxtIQ;EACE,sCAvFoB;A1BizI9B;A0BptIE;EACE,sCAvFA;A1B6yIJ;A0B7sIE;EACE;EAIA;A1B4sIJ;A0BlsIE;EACE;A1BosIJ;A2Bl1II;EAIE;A3Bi1IN;A2B90II;EACE;A3Bg1IN;A2B10II;EACE;IACE;E3B40IN;AACF;A2Bz0II;;EAIE;A3By0IN;A2Bt0II;EAGE;EACA;A3Bs0IN;A2Bn0II;;;EAGE;EACA;A3Bq0IN;A2Bj0IM;EACE;A3Bm0IR;A2Bh0IM;;;EAGE;EACA;A3Bk0IR;A2B7zIM;EACE;A3B+zIR;A2B5zIM;;;EAGE;EACA;A3B8zIR;A2B1zII;EACE;EACA;A3B4zIN;A2BzzII;EACE;A3B2zIN;A2BxzII;EACE;A3B0zIN;A2BtzIE;EACE;A3BwzIJ;A2BrzIE;EACE;A3BuzIJ;A2BpzIE;;;EAGE;A3BszIJ;A2B7wII;EACE,YANK;A3BqxIX;A2B5wII;;EAEE;A3B8wIN;A2BzwII;EACE;EACA;A3B2wIN;A2BtwIM;EACE;A3BwwIR;A2BnwII;EACE;A3BqwIN;AwD16IE;EAYI;AxDi6IN;A4Bz6IE;;EAEE,kDAJc;A5B+6IlB;A4Bv6II;;EAEE,+CAVY;EAWZ;A5By6IN;A4Br6IE;EACE;A5Bu6IJ;A4Br6II;EACE;A5Bu6IN;A4Bn6IE;EACE;A5Bq6IJ;A4Bl6IE;EACE;A5Bo6IJ;A4Bh6IE;;EAEE;EACA;A5Bk6IJ;A4Bp3IM;;;;;EACE;A5B03IR;A4Br4IE;EACE;A5Bu4IJ;A4Bx4IE;EACE;A5B04IJ;A4Bj4IM;;;;;EACE;A5Bu4IR;A4Bl5IE;EACE;A5Bo5IJ;A4Br5IE;EACE;A5Bu5IJ;A4B94IM;;;;;EACE;A5Bo5IR;A4B/5IE;EACE;A5Bi6IJ;A4Bl6IE;EACE;A5Bo6IJ;A4B35IM;;;;;EACE;A5Bi6IR;A4Bt5IE;EACE;A5Bw5IJ;A4Bp5IE;EACE;A5Bs5IJ;A4Bp5II;EACE;A5Bs5IN;A4Bj5IE;;;;;;;EAIE;A5Bs5IJ;A4Bn5IE;;;EAGE;EACA;A5Bq5IJ;A4Bh5IE;;;;;EAIE;EACA;A5Bm5IJ;A4Bl8IM;;;;;EACE;A5Bw8IR;A4B77IE;EACE;A5B+7IJ;A4B37IE;EACE;A5B67IJ;A4B37II;EACE;A5B67IN;A4Bx7IE;;;;;;;EAIE;A5B67IJ;A4B17IE;;;EAGE;EACA;A5B47IJ;A4Bv7IE;;;;;EAIE;EACA;A5B07IJ;A4Bz+IM;;;;;EACE;A5B++IR;A4Bp+IE;EACE;A5Bs+IJ;A4Bl+IE;EACE;A5Bo+IJ;A4Bl+II;EACE;A5Bo+IN;A4B/9IE;;;;;;;EAIE;A5Bo+IJ;A4Bj+IE;;;EAGE;EACA;A5Bm+IJ;A4B99IE;;;;;EAIE;EACA;A5Bi+IJ;A6B3jJE;EACE;EACA;A7B6jJJ;A6B3jJI;EApCF;EACA;A7BkmJF;A6B3jJI;EAxCF;EACA;A7BsmJF;A6B3jJI;EA5CF;EACA;A7B0mJF;A6BtmJE;;;EAGE;A7BwmJJ;A6BrmJE;;;;;EAKE;A7BumJJ;A6BpmJE;EACE;A7BsmJJ;A6BnoJE;EACE,gBA6Ee;A7BwjJnB;A6BnoJE;EACE,YA0Ee;A7B2jJnB;A6B/iJI;EA1FF;IACE,gBA+Ec;E7B6jJhB;E6B1oJA;IACE,YA4Ec;E7B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E;EC5KE;EAcF;EDgKE;AwDrLJ;;AxDwLE;ECjLE;EAcF;EDqKE;AwDpLJ;;AxDuLE;ECtLE;EAcF;ED0KE;AwDnLJ;;AtDnEE;ED8DE;EAcF;AuDJF;;ArD2EE;;EAGI;EACA;EACA;AqDzEN;;ApDXE;EACE;AoDcJ;;AnDzEE;EACE;AmD4EJ;;AnDzEE;EAEI;EACA;AmD2EN;;AnDvEE;EACE;AmD0EJ;;AnDvEE;;EAEE;AmD0EJ;;AlDpBE;EACE;AkDuBJ;;AlDnBE;EACE;AkDsBJ;;AjDpCE;EACE;EACA;AiDuCJ;;AjDrCI;;EAEE,eA7FkB;AiDoIxB;;AhDrGE;EACE;AgDwGJ;;AhDrGE;EACE;EACA;AgDwGJ;;AhDrGE;EACE;AgDwGJ;;A/CgCE;EACE;A+C7BJ;;A/CgCE;EACE,eA/KsB;A+CkJ1B;;A/CgCE;;EAGI;EACA;A+C9BN;;A/CkCE;EAEI,eA3L6B;EA4L7B;A+ChCN;;A9CrJE;ET6DE;EAcF;AuD+EF;;A7CrHE;EAEI;EACA;EACA;A6CuHN;;A7CnHE;EVgBE;EAcF;AuD0FF;;A5CtBE;EX3FE,kBAiBU;EAhBV,gBAiBY;EAhBZ,kBAiBY;EAhBZ,iDAiBY;EAGd;AuDkGF;;A5C1BE;EACE,yBAPuB;A4CoC3B;;A5CvBI;;EACE,eAvB2B;EAwB3B,kBAxCU;A4CmEhB;;A5CvBI;;EACE;EACA;A4C0BN;;A5CxBM;;EACE;EACA,kBAlDQ;A4C6EhB;;A5CtBE;EACE;EAEA;A4CwBJ;;A5CpBI;;EAzEF;EAEA;A4CiGF;;A5ClBI;EAjFF;EAEA;A4CqGF;;A5CfE;EACE;EACA,sBApEiB;A4CsFrB;;A5CfE;EACE;A4CkBJ;;A5CfE;EAGE,iBAhEuB;A4CgF3B;;A5CbE;EACE,cA/EoB;EAgFpB,0BAzEqB;EA6ErB;A4CaJ;;A3CnJI;EACE,sBAJqB;A2C0J3B;;A3CnJI;EACE;A2CqJN;;A3CjJM;;EA7DJ;EAIA;EAGA;A2C6MF;;A3ChJM;EApEJ;EAIA;EAGA;A2CkNF;;A3C7IM;EA5EJ;EAIA;EAGA;A2CuNF;;A3C3II;EACE;A2C6IN;;A3C1II;EAGE,cAzCqB;A2CmL3B;;A3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","sources":["./src/styles.scss","./node_modules/@angular/material/badge/_badge-theme.scss","./node_modules/@angular/material/core/typography/_typography.scss","./node_modules/@angular/material/core/typography/_typography-utils.scss","./node_modules/@angular/material/bottom-sheet/_bottom-sheet-theme.scss","./node_modules/@angular/material/button/_button-theme.scss","./node_modules/@angular/material/button-toggle/_button-toggle-theme.scss","./node_modules/@angular/material/card/_card-theme.scss","./node_modules/@angular/material/checkbox/_checkbox-theme.scss","./node_modules/@angular/material/chips/_chips-theme.scss","./node_modules/@angular/material/table/_table-theme.scss","./node_modules/@angular/material/datepicker/_datepicker-theme.scss","./node_modules/@angular/material/dialog/_dialog-theme.scss","./node_modules/@angular/material/expansion/_expansion-theme.scss","./node_modules/@angular/material/form-field/_form-field-theme.scss","./node_modules/@angular/material/form-field/_form-field-legacy-theme.scss","./node_modules/@angular/material/form-field/_form-field-fill-theme.scss","./node_modules/@angular/material/form-field/_form-field-outline-theme.scss","./node_modules/@angular/material/grid-list/_grid-list-theme.scss","./node_modules/@angular/material/core/style/_list-common.scss","./node_modules/@angular/material/input/_input-theme.scss","./node_modules/@angular/material/menu/_menu-theme.scss","./node_modules/@angular/material/paginator/_paginator-theme.scss","./node_modules/@angular/material/radio/_radio-theme.scss","./node_modules/@angular/material/select/_select-theme.scss","./node_modules/@angular/material/slide-toggle/_slide-toggle-theme.scss","./node_modules/@angular/material/slider/_slider-theme.scss","./node_modules/@angular/material/stepper/_stepper-theme.scss","./node_modules/@angular/material/tabs/_tabs-theme.scss","./node_modules/@angular/material/toolbar/_toolbar-theme.scss","./node_modules/@angular/material/tooltip/_tooltip-theme.scss","./node_modules/@angular/material/list/_list-theme.scss","./node_modules/@angular/material/core/option/_option-theme.scss","./node_modules/@angular/material/core/option/_optgroup-theme.scss","./node_modules/@angular/material/snack-bar/_snack-bar-theme.scss","./node_modules/@angular/material/tree/_tree-theme.scss","./node_modules/@angular/material/core/ripple/_ripple.scss","./node_modules/@angular/cdk/a11y/_index.scss","./node_modules/@angular/cdk/overlay/_index.scss","./node_modules/@angular/cdk/text-field/_index.scss","./node_modules/@angular/material/core/focus-indicators/_focus-indicators.scss","./node_modules/@angular/material/core/_core.scss","./node_modules/@angular/material/core/ripple/_ripple-theme.scss","./node_modules/@angular/material/core/selection/pseudo-checkbox/_pseudo-checkbox-theme.scss","./node_modules/@angular/material/core/_core-theme.scss","./node_modules/@angular/material/core/style/_elevation.scss","./node_modules/@angular/material/autocomplete/_autocomplete-theme.scss","./node_modules/@angular/material/divider/_divider-theme.scss","./node_modules/@angular/material/expansion/_expansion-mixins.scss","./node_modules/@angular/material/core/style/_form-common.scss","./node_modules/@angular/material/form-field/_form-field-standard-theme.scss","./node_modules/@angular/material/icon/_icon-theme.scss","./node_modules/@angular/material/core/style/_vendor-prefixes.scss","./node_modules/@angular/material/progress-bar/_progress-bar-theme.scss","./node_modules/@angular/material/progress-spinner/_progress-spinner-theme.scss","./node_modules/@angular/material/sidenav/_sidenav-theme.scss","./node_modules/@angular/material/sort/_sort-theme.scss","./node_modules/@angular/material/core/theming/_palette.scss","./src/variables.scss"],"sourcesContent":["/* You can add global styles to this file, and also import other style files */\n@use \"@angular/material\" as mat;\n@import \"~@angular/material/theming\";\n\n@include mat.core();\n\n@import \"variables.scss\";\n\n@include mat.all-component-themes($light-theme);\n$_background: map-get($light-theme, background);\n$_foreground: map-get($light-theme, foreground);\n$app-background-color: mat-color($_background, background);\n$app-foreground-color: mat-color($_foreground, text);\n\nhtml,\nbody {\n  height: 100%;\n  background-color: $app-background-color;\n  color: $app-foreground-color;\n  overscroll-behavior-y: contain;\n}\n\n[data-theme=\"light\"] {\n  as-split {\n    overflow: inherit;\n\n    .as-split-gutter {\n      background-color: #e9e9e9 !important;\n      align-items: flex-end !important;\n      pointer-events: none;\n\n      & > .as-split-gutter-icon {\n        pointer-events: all;\n        transition: all 0.3s;\n        opacity: 0.6;\n\n        &:hover {\n          opacity: 1;\n        }\n      }\n    }\n  }\n}\n\n[data-theme=\"dark\"] {\n  @include mat.all-component-themes($dark-theme);\n  $_background: map-get($dark-theme, background);\n  $_foreground: map-get($dark-theme, foreground);\n  $app-background-color: mat-color($_background, background);\n  $app-foreground-color: mat-color($_foreground, text);\n\n  html,\n  body {\n    height: 100%;\n    background-color: $app-background-color;\n    color: $app-foreground-color;\n  }\n\n  as-split {\n    overflow: inherit;\n\n    .as-split-gutter {\n      background-color: rgb(66, 66, 66) !important;\n      align-items: flex-end !important;\n      pointer-events: none;\n\n      & > .as-split-gutter-icon {\n        pointer-events: all;\n        transition: all 0.3s;\n        opacity: 0.6;\n\n        &:hover {\n          opacity: 1;\n        }\n      }\n    }\n  }\n}\n\nbody {\n  margin: 0;\n  font-family: Roboto, \"Helvetica Neue\", sans-serif;\n}\n//----pointer ----\nmat-icon {\n  cursor: pointer;\n}\n.pointer {\n  cursor: pointer;\n}\n[ng-reflect-router-link]:hover {\n  cursor: pointer;\n}\n\n[ng-reflect-router-link] {\n  cursor: pointer;\n}\n\n//----light-black-color ----\n.light-black-color {\n  color: $light-black-color;\n}\n\n.body1 {\n  font-weight: 400;\n  @extend .light-black-color;\n  font-size: 16px;\n}\n.body2 {\n  font-weight: 400;\n  @extend .light-black-color;\n  font-size: 15px;\n}\n.body3 {\n  font-weight: 400;\n  @extend .light-black-color;\n  font-size: 14px;\n}\n.body4 {\n  font-weight: 400;\n  @extend .light-black-color;\n  font-size: 12px;\n}\n.body5 {\n  font-weight: 400;\n  @extend .light-black-color;\n  font-size: 10px;\n}\n.body1-semibold {\n  @extend .light-black-color;\n  font-size: 16px;\n  font-weight: 500;\n}\n.body2-semibold {\n  @extend .light-black-color;\n  font-size: 15px;\n  font-weight: 500;\n}\n.body3-semibold {\n  @extend .light-black-color;\n  font-size: 14px;\n  font-weight: 500;\n}\n.body4-semibold {\n  @extend .light-black-color;\n  font-size: 12px;\n  font-weight: 500;\n}\n.body5-semibold {\n  @extend .light-black-color;\n  font-size: 10px;\n  font-weight: 500;\n}\n.body1-bold {\n  @extend .light-black-color;\n  font-size: 16px;\n  font-weight: 700;\n}\n.body2-bold {\n  @extend .light-black-color;\n  font-size: 15px;\n  font-weight: 700;\n}\n.body3-bold {\n  @extend .light-black-color;\n  font-size: 14px;\n  font-weight: 700;\n}\n.body4-bold {\n  @extend .light-black-color;\n  font-size: 12px;\n  font-weight: 700;\n}\n.body5-bold {\n  @extend .light-black-color;\n  font-size: 10px;\n  font-weight: 700;\n}\n.body4-overline {\n  @extend .light-black-color;\n  font-size: 12px;\n  font-weight: 400;\n  text-decoration: line-through;\n  line-height: 14px;\n}\n\n//headings\n\n.heading1 {\n  @extend .light-black-color;\n  font-size: 24px;\n  font-weight: 700;\n}\n.heading2 {\n  @extend .light-black-color;\n  font-size: 20px;\n  font-weight: 700;\n}\n.heading3 {\n  @extend .light-black-color;\n  font-size: 18px;\n  font-weight: 700;\n}\n.heading4 {\n  @extend .light-black-color;\n  font-size: 15px;\n  font-weight: 600;\n}\n.heading1-regular{\n  @extend .light-black-color;\n  font-size: 24px;\n  font-weight: 500;\n}\n.heading2-regular {\n  @extend .light-black-color;\n  font-size: 20px;\n  font-weight: 500;\n}\n.heading3-regular {\n  @extend .light-black-color;\n  font-size: 18px;\n  font-weight: 600;\n}\n\n//--------primary--------\n\n$colors: (\n  primary: $primary,\n  success: $success,\n  warning: $warning,\n  error: $error,\n  darker: $darker,\n  light-grey: $light-grey,\n  grey: $grey,\n  dark-grey: $dark-grey,\n  white: $white,\n  white-60: $white-60,\n  white-80: $white-80,\n  black: $black,\n  light-black-color: $light-black-color,\n  white-opacity: $white-opacity,\n  extra-light-grey: $extra-light-grey,\n);\n@each $colorname, $color in $colors {\n  .#{\"\" + $colorname}-color {\n    //Ex: primary-color\n    color: $color;\n  }\n  .#{\"\" + $colorname}-border-color {\n    //Ex: primary-border-color\n    border: solid 1px $color;\n  }\n  .#{\"\" + $colorname}-border-bottom-color {\n    //Ex: primary-border-bottom-color\n    border-bottom: solid 1px $color;\n  }\n  .#{\"\" + $colorname}-border-top-color {\n    //Ex: primary-border-bottom-color\n    border-top: solid 1px $color;\n  }\n  .#{\"\" + $colorname}-background-color {\n    //Ex: primary-background-color\n    background-color: $color;\n  }\n  button.#{\"\" + $colorname}-border-color {\n    //Ex button.primary-border-color\n    border: solid 1px $color;\n  }\n  .#{\"\" + $colorname}-color svg > g > path {\n    //primary-color svg > g > path\n    fill: $color;\n  }\n  .#{\"\" + $colorname}-color-stroke {\n    //primary-color-stroke\n    stroke: $color;\n  }\n  .button-#{\"\" + $colorname}-color {\n    //Ex: button-primary-color\n    background-color: $color;\n    color: white;\n  }\n}\n.icon-disabled {\n  color: $disabled-icon-color;\n}\n.button-disabled {\n  background-color: lightgrey;\n  color: grey;\n}\n.mat-tab-label {\n  width: 100%;\n}\n.mat-tab-label-active {\n  color: $primary !important;\n}\nmat-select {\n  padding: 10px 10px;\n  border-radius: 5px;\n  margin-bottom: 8px;\n  width: 90% !important;\n}\ninput {\n  border-radius: 5px;\n  height: 45px;\n  padding-left: 10px;\n  padding-right: 10px;\n  font-size: 15px;\n}\ntextarea {\n  padding: 10px;\n  width: 205px;\n  font-size: 15px;\n  height: 120px;\n  border-radius: 5px;\n}\n// .button{\n//   border: solid 1px $primary;\n//   border-radius: 5px;\n//   padding: 12px;\n//   color: $primary;\n//   background-color: transparent;\n//   min-width: 120px;\n//   font-size: 18px;\n//   font-weight: 600;\n// }\n.button {\n  border-radius: 5px !important;\n  padding-top: 5px !important;\n  padding-bottom: 5px !important;\n  min-width: 120px !important;\n  font-size: 17px !important;\n  font-weight: 500 !important;\n}\n// .button-raised {\n//   color: $white-80;\n//   background-color: $primary;\n//   border: solid 1px $primary;\n//   border-radius: 5px;\n//   padding: 12px;\n//   min-width: 120px;\n//   font-size: 18px;\n//   font-weight: 600;\n// }\n\n.button-status{\n  height: 28px;\n  line-height: normal !important;\n}\n","// This contains all of the styles for the badge\n// rather than just the color/theme because of\n// no style sheet support for directives.\n@use 'sass:color';\n@use 'sass:map';\n@use 'sass:meta';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/style/private';\n@use '../../cdk/a11y';\n\n$font-size: 12px;\n$font-weight: 600;\n$default-size: 22px !default;\n$small-size: $default-size - 6;\n$large-size: $default-size + 6;\n$_badge-structure-emitted: false !default;\n\n// Mixin for building offset given different sizes\n@mixin _badge-size($size) {\n  // This mixin isn't used in the context of a theme so we can disable the ampersand check.\n  // stylelint-disable material/no-ampersand-beyond-selector-start\n  .mat-badge-content {\n    width: $size;\n    height: $size;\n    line-height: $size;\n  }\n\n  &.mat-badge-above {\n    .mat-badge-content {\n      top: private.private-div(-$size, 2);\n    }\n  }\n\n  &.mat-badge-below {\n    .mat-badge-content {\n      bottom: private.private-div(-$size, 2);\n    }\n  }\n\n  &.mat-badge-before {\n    .mat-badge-content {\n      left: -$size;\n    }\n  }\n\n  [dir='rtl'] &.mat-badge-before {\n    .mat-badge-content {\n      left: auto;\n      right: -$size;\n    }\n  }\n\n  &.mat-badge-after {\n    .mat-badge-content {\n      right: -$size;\n    }\n  }\n\n  [dir='rtl'] &.mat-badge-after {\n    .mat-badge-content {\n      right: auto;\n      left: -$size;\n    }\n  }\n\n  &.mat-badge-overlap {\n    &.mat-badge-before {\n      .mat-badge-content {\n        left: private.private-div(-$size, 2);\n      }\n    }\n\n    [dir='rtl'] &.mat-badge-before {\n      .mat-badge-content {\n        left: auto;\n        right: private.private-div(-$size, 2);\n      }\n    }\n\n    &.mat-badge-after {\n      .mat-badge-content {\n        right: private.private-div(-$size, 2);\n      }\n    }\n\n    [dir='rtl'] &.mat-badge-after {\n      .mat-badge-content {\n        right: auto;\n        left: private.private-div(-$size, 2);\n      }\n    }\n  }\n  // stylelint-enable\n}\n\n// Structural styles for the badge. They have to be included as a part of the theme,\n// because the badge is a directive and we have no other way of attaching styles to it.\n@mixin _badge-structure {\n  .mat-badge {\n    position: relative;\n  }\n\n  .mat-badge-hidden {\n    .mat-badge-content {\n      display: none;\n    }\n  }\n\n  .mat-badge-content {\n    position: absolute;\n    text-align: center;\n    display: inline-block;\n    border-radius: 50%;\n    transition: transform 200ms ease-in-out;\n    transform: scale(0.6);\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    pointer-events: none;\n  }\n\n  .ng-animate-disabled .mat-badge-content,\n  .mat-badge-content._mat-animation-noopable {\n    transition: none;\n  }\n\n  // The active class is added after the element is added\n  // so it can animate scale to default\n  .mat-badge-content.mat-badge-active {\n    // Scale to `none` instead of `1` to avoid blurry text in some browsers.\n    transform: none;\n  }\n\n  .mat-badge-small {\n    @include _badge-size($small-size);\n  }\n\n  .mat-badge-medium {\n    @include _badge-size($default-size);\n  }\n\n  .mat-badge-large {\n    @include _badge-size($large-size);\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $primary: map.get($config, primary);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-badge-content {\n    color: theming.get-color-from-palette($primary, default-contrast);\n    background: theming.get-color-from-palette($primary);\n\n    @include a11y.high-contrast(active, off) {\n      outline: solid 1px;\n      border-radius: 0;\n    }\n  }\n\n  .mat-badge-accent {\n    .mat-badge-content {\n      background: theming.get-color-from-palette($accent);\n      color: theming.get-color-from-palette($accent, default-contrast);\n    }\n  }\n\n  .mat-badge-warn {\n    .mat-badge-content {\n      color: theming.get-color-from-palette($warn, default-contrast);\n      background: theming.get-color-from-palette($warn);\n    }\n  }\n\n  .mat-badge-disabled {\n    .mat-badge-content {\n      $app-background: theming.get-color-from-palette($background, 'background');\n      $badge-color: theming.get-color-from-palette($foreground, disabled-button);\n\n      // The disabled color usually has some kind of opacity, but because the badge is overlayed\n      // on top of something else, it won't look good if it's opaque. If it is a color *type*,\n      // we convert it into a solid color by taking the opacity from the rgba value and using\n      // the value to determine the percentage of the background to put into foreground when\n      // mixing the colors together.\n      @if (meta.type-of($badge-color) == color and meta.type-of($app-background) == color) {\n        $badge-opacity: opacity($badge-color);\n        background: color.mix($app-background, rgba($badge-color, 1), (1 - $badge-opacity) * 100%);\n      }\n      @else {\n        background: $badge-color;\n      }\n\n      color: theming.get-color-from-palette($foreground, disabled-text);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-badge-content {\n    font-weight: $font-weight;\n    font-size: $font-size;\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-badge-small .mat-badge-content {\n    // Set the font size to 75% of the original.\n    font-size: $font-size * 0.75;\n  }\n\n  .mat-badge-large .mat-badge-content {\n    font-size: $font-size * 2;\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-badge') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    // Try to reduce the number of times that the structural styles are emitted.\n    @if not $_badge-structure-emitted {\n      @include _badge-structure;\n\n      // Only flip the flag if the mixin is included at the top level. Otherwise the first\n      // inclusion might be inside of a theme class which will exclude the structural styles\n      // from all other themes.\n      @if not & {\n        $_badge-structure-emitted: true !global;\n      }\n    }\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'typography-utils';\n@use '../theming/theming';\n\n/// Defines a typography level from the Material Design spec.\n/// @param {String} $font-size The font-size for this level.\n/// @param {String | Number} $line-height The line-height for this level.\n/// @param {String | Number} $font-weight The font-weight for this level.\n/// @param {String} $font-family The font-family for this level.\n/// @param {String} $letter-spacing The letter-spacing for this level.\n/// @returns {Map} A map representing the definition of this typpographic level.\n@function define-typography-level(\n  $font-size,\n  $line-height: $font-size,\n  $font-weight: 400,\n  $font-family: null,\n  $letter-spacing: normal) {\n\n  @return (\n    font-size: $font-size,\n    line-height: $line-height,\n    font-weight: $font-weight,\n    font-family: $font-family,\n    letter-spacing: $letter-spacing\n  );\n}\n\n/// Defines a collection of typography levels to configure typography for an application.\n/// Any level not specified defaults to the values defined in the Material Design specification:\n/// https://material.io/guidelines/style/typography.html.\n///\n/// Note that the Material Design specification does not describe explicit letter-spacing values.\n/// The values here come from reverse engineering the Material Design examples.\n/// @param {String} $font-family Default font-family for levels that don't specify font-family.\n/// @param {Map} $display-4 Configuration for the \"display-4\" typographic level.\n/// @param {Map} $display-3 Configuration for the \"display-3\" typographic level.\n/// @param {Map} $display-2 Configuration for the \"display-2\" typographic level.\n/// @param {Map} $display-1 Configuration for the \"display-1\" typographic level.\n/// @param {Map} $headline Configuration for the \"headline\" typographic level.\n/// @param {Map} $title Configuration for the \"title\" typographic level.\n/// @param {Map} $subheading-2 Configuration for the \"subheading-2\" typographic level.\n/// @param {Map} $subheading-1 Configuration for the \"subheading-1\" typographic level.\n/// @param {Map} $body-2 Configuration for the \"body-2\" typographic level.\n/// @param {Map} $body-1 Configuration for the \"body-1\" typographic level.\n/// @param {Map} $caption Configuration for the \"caption\" typographic level.\n/// @param {Map} $button Configuration for the \"button\" typographic level.\n/// @param {Map} $input Configuration for the \"input\" typographic level.\n/// @returns {Map} A typography config for the application.\n@function define-typography-config(\n  $font-family:   'Roboto, \"Helvetica Neue\", sans-serif',\n  $display-4:     define-typography-level(112px, 112px, 300, $letter-spacing: -0.05em),\n  $display-3:     define-typography-level(56px, 56px, 400, $letter-spacing: -0.02em),\n  $display-2:     define-typography-level(45px, 48px, 400, $letter-spacing: -0.005em),\n  $display-1:     define-typography-level(34px, 40px, 400),\n  $headline:      define-typography-level(24px, 32px, 400),\n  $title:         define-typography-level(20px, 32px, 500),\n  $subheading-2:  define-typography-level(16px, 28px, 400),\n  $subheading-1:  define-typography-level(15px, 24px, 400),\n  $body-2:        define-typography-level(14px, 24px, 500),\n  $body-1:        define-typography-level(14px, 20px, 400),\n  $caption:       define-typography-level(12px, 20px, 400),\n  $button:        define-typography-level(14px, 14px, 500),\n  // Line-height must be unit-less fraction of the font-size.\n  $input:         define-typography-level(inherit, 1.125, 400)\n) {\n\n  // Declare an initial map with all of the levels.\n  $config: (\n    display-4:      $display-4,\n    display-3:      $display-3,\n    display-2:      $display-2,\n    display-1:      $display-1,\n    headline:       $headline,\n    title:          $title,\n    subheading-2:   $subheading-2,\n    subheading-1:   $subheading-1,\n    body-2:         $body-2,\n    body-1:         $body-1,\n    caption:        $caption,\n    button:         $button,\n    input:          $input,\n  );\n\n  // Loop through the levels and set the `font-family` of the ones that don't have one to the base.\n  // Note that Sass can't modify maps in place, which means that we need to merge and re-assign.\n  @each $key, $level in $config {\n    @if map.get($level, font-family) == null {\n      $new-level: map.merge($level, (font-family: $font-family));\n      $config: map.merge($config, ($key: $new-level));\n    }\n  }\n\n  // Add the base font family to the config.\n  @return map.merge($config, (font-family: $font-family));\n}\n\n// Whether a config is for the Material Design 2018 typography system.\n@function private-typography-is-2018-config($config) {\n  @return map.get($config, headline-1) != null;\n}\n\n// Whether a config is for the Material Design 2014 typography system.\n@function private-typography-is-2014-config($config) {\n  @return map.get($config, headline) != null;\n}\n\n// Given a config for either the 2014 or 2018 Material Design typography system,\n// produces a normalized typography config for the 2014 Material Design typography system.\n// 2014 - https://material.io/archive/guidelines/style/typography.html#typography-styles\n// 2018 - https://material.io/design/typography/the-type-system.html#type-scale\n//\n// Components using this function should be migrated to normalize to the 2018 style config instead.\n// New components should not use this function.\n@function private-typography-to-2014-config($config) {\n  @if $config == null {\n    @return null;\n  }\n  @if not private-typography-is-2014-config($config) {\n    $args: (\n        display-4: map.get($config, headline-1),\n        display-3: map.get($config, headline-2),\n        display-2: map.get($config, headline-3),\n        display-1: map.get($config, headline-4),\n        headline: map.get($config, headline-5),\n        title: map.get($config, headline-6),\n        subheading-2: map.get($config, subtitle-1),\n        subheading-1: map.get($config, subtitle-2),\n        body-2: map.get($config, body-1),\n        body-1: map.get($config, body-2),\n        button: map.get($config, button),\n        caption: map.get($config, caption),\n    );\n    $non-null-args: ();\n    @each $key, $value in $args {\n      @if $value != null {\n        $non-null-args: map.merge($non-null-args, ($key: $value));\n      }\n    }\n    @return define-typography-config($non-null-args...);\n  }\n  @return $config;\n}\n\n// Given a config for either the 2014 or 2018 Material Design typography system,\n// produces a normalized typography config for the 2018 Material Design typography system.\n// 2014 - https://material.io/archive/guidelines/style/typography.html#typography-styles\n// 2018 - https://material.io/design/typography/the-type-system.html#type-scale\n@function private-typography-to-2018-config($config) {\n  @if $config == null {\n    @return null;\n  }\n  @if not private-typography-is-2018-config($config) {\n    @return (\n        headline-1: map.get($config, display-4),\n        headline-2: map.get($config, display-3),\n        headline-3: map.get($config, display-2),\n        headline-4: map.get($config, display-1),\n        headline-5: map.get($config, headline),\n        headline-6: map.get($config, title),\n        subtitle-1: map.get($config, subheading-2),\n\n        // These mappings are odd, but body-2 in the 2014 system actually looks closer to subtitle-2\n        // in the 2018 system, and subeading-1 in the 2014 system looks more like body-1 in the 2018\n        // system.\n        subtitle-2: map.get($config, body-2),\n        body-1: map.get($config, subheading-1),\n\n        body-2: map.get($config, body-1),\n        button: map.get($config, button),\n        caption: map.get($config, caption),\n        overline: if(map.get($config, overline), map.get($config, overline),\n            define-typography-level(12px, 32px, 500)\n        )\n    );\n  }\n  @return $config;\n}\n\n// stylelint-disable material/theme-mixin-api\n\n/// Emits baseline typographic styles based on a given config.\n/// @param {Map} $config-or-theme A typography config for an entire theme.\n/// @param {String} $selector Ancestor selector under which native elements, such as h1, will\n///     be styled.\n@mixin typography-hierarchy($config-or-theme, $selector: '.mat-typography') {\n  $config: private-typography-to-2014-config(theming.get-typography-config($config-or-theme));\n\n  .mat-h1, .mat-headline, #{$selector} h1 {\n    @include typography-utils.typography-level($config, headline);\n    margin: 0 0 16px;\n  }\n\n  .mat-h2, .mat-title, #{$selector} h2 {\n    @include typography-utils.typography-level($config, title);\n    margin: 0 0 16px;\n  }\n\n  .mat-h3, .mat-subheading-2, #{$selector} h3 {\n    @include typography-utils.typography-level($config, subheading-2);\n    margin: 0 0 16px;\n  }\n\n  .mat-h4, .mat-subheading-1, #{$selector} h4 {\n    @include typography-utils.typography-level($config, subheading-1);\n    margin: 0 0 16px;\n  }\n\n  // Note: the spec doesn't have anything that would correspond to h5 and h6, but we add these for\n  // consistency. The font sizes come from the Chrome user agent styles which have h5 at 0.83em\n  // and h6 at 0.67em.\n  .mat-h5, #{$selector} h5 {\n    @include typography-utils.font-shorthand(\n       // calc is used here to support css variables\n      calc(#{typography-utils.font-size($config, body-1)} * 0.83),\n      typography-utils.font-weight($config, body-1),\n      typography-utils.line-height($config, body-1),\n      typography-utils.font-family($config, body-1)\n    );\n\n    margin: 0 0 12px;\n  }\n\n  .mat-h6, #{$selector} h6 {\n    @include typography-utils.font-shorthand(\n       // calc is used here to support css variables\n      calc(#{typography-utils.font-size($config, body-1)} * 0.67),\n      typography-utils.font-weight($config, body-1),\n      typography-utils.line-height($config, body-1),\n      typography-utils.font-family($config, body-1)\n    );\n\n    margin: 0 0 12px;\n  }\n\n  .mat-body-strong, .mat-body-2 {\n    @include typography-utils.typography-level($config, body-2);\n  }\n\n  .mat-body, .mat-body-1, #{$selector} {\n    @include typography-utils.typography-level($config, body-1);\n\n    p {\n      margin: 0 0 12px;\n    }\n  }\n\n  .mat-small, .mat-caption {\n    @include typography-utils.typography-level($config, caption);\n  }\n\n  .mat-display-4, #{$selector} .mat-display-4 {\n    @include typography-utils.typography-level($config, display-4);\n    margin: 0 0 56px;\n  }\n\n  .mat-display-3, #{$selector} .mat-display-3 {\n    @include typography-utils.typography-level($config, display-3);\n    margin: 0 0 64px;\n  }\n\n  .mat-display-2, #{$selector} .mat-display-2 {\n    @include typography-utils.typography-level($config, display-2);\n    margin: 0 0 64px;\n  }\n\n  .mat-display-1, #{$selector} .mat-display-1 {\n    @include typography-utils.typography-level($config, display-1);\n    margin: 0 0 64px;\n  }\n}\n\n// stylelint-enable material/theme-mixin-api\n","@use 'sass:list';\n@use 'sass:map';\n@use 'sass:math';\n@use 'sass:meta';\n@use 'sass:string';\n@use '../style/private';\n\n\n// Utility for fetching a nested value from a typography config.\n@function _mat-get-type-value($config, $level, $name) {\n  @return map.get(map.get($config, $level), $name);\n}\n\n/// Gets the font size for a level inside a typography config.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@function font-size($config, $level) {\n  @return _mat-get-type-value($config, $level, font-size);\n}\n\n/// Gets the line height for a level inside a typography config.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@function line-height($config, $level) {\n  @return _mat-get-type-value($config, $level, line-height);\n}\n\n/// Gets the font weight for a level inside a typography config.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@function font-weight($config, $level) {\n  @return _mat-get-type-value($config, $level, font-weight);\n}\n\n/// Gets the letter spacing for a level inside a typography config.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@function letter-spacing($config, $level) {\n  @return _mat-get-type-value($config, $level, letter-spacing);\n}\n\n/// Gets the font-family from a typography config and removes the quotes around it.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@function font-family($config, $level: null) {\n  $font-family: map.get($config, font-family);\n\n  @if $level != null {\n    $font-family: _mat-get-type-value($config, $level, font-family);\n  }\n\n  // Guard against unquoting non-string values, because it's deprecated.\n  @return if(meta.type-of($font-family) == string, string.unquote($font-family), $font-family);\n}\n\n/// Outputs the shorthand `font` CSS property, based on a set of typography values. Falls back to\n/// the individual properties if a value that isn't allowed in the shorthand is passed in.\n/// @param {String} $font-size The font-size value.\n/// @param {String | Number} $font-weight The font-weight value.\n/// @param {String | Number} $line-height The line-height value.\n/// @param {String} $font-family The font-family value.\n/// @returns {String} The `font` shorthand value combining the given parts.\n@mixin font-shorthand($font-size, $font-weight, $line-height, $font-family) {\n  // If any of the values are set to `inherit`, we can't use the shorthand\n  // so we fall back to passing in the individual properties.\n  @if ($font-size == inherit or\n       $font-weight == inherit or\n       $line-height == inherit or\n       $font-family == inherit or\n       $font-size == null or\n       $font-weight == null or\n       $line-height == null or\n       $font-family == null) {\n\n    font-size: $font-size;\n    font-weight: $font-weight;\n    line-height: $line-height;\n    font-family: $font-family;\n  }\n  @else {\n    // Otherwise use the shorthand `font`, because it's the least amount of bytes. Note\n    // that we need to use `list.slash` for `font-size/line-height` in order to prevent\n    // Sass from dividing the two values.\n    font: $font-weight private.private-slash($font-size, $line-height) $font-family;\n  }\n}\n\n/// Emits CSS styles for the given typography level.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@mixin typography-level($config, $level) {\n  $font-size: font-size($config, $level);\n  $font-weight: font-weight($config, $level);\n  $line-height: line-height($config, $level);\n  $font-family: font-family($config, $level);\n\n  @include font-shorthand($font-size, $font-weight, $line-height, $font-family);\n  letter-spacing: letter-spacing($config, $level);\n}\n\n/// Coerce a value to `em` if it is a unitless number, otherwise returns\n/// the value provided.\n@function private-coerce-unitless-to-em($value) {\n  @return if(math.is-unitless($value), 1em * $value, $value);\n}\n","@use 'sass:map';\n@use '../core/style/private';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-bottom-sheet-container {\n    @include private.private-theme-elevation(16, $config);\n    background: theming.get-color-from-palette($background, dialog);\n    color: theming.get-color-from-palette($foreground, text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-bottom-sheet-container {\n    @include typography-utils.typography-level($config, body-1);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-bottom-sheet') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:meta';\n@use '../core/theming/theming';\n@use '../core/style/private';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n$_ripple-opacity: 0.1;\n\n// Applies a focus style to an mat-button element for each of the supported palettes.\n@mixin _focus-overlay-color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n\n  &.mat-primary .mat-button-focus-overlay {\n    background-color: theming.get-color-from-palette($primary);\n  }\n\n  &.mat-accent .mat-button-focus-overlay {\n    background-color: theming.get-color-from-palette($accent);\n  }\n\n  &.mat-warn .mat-button-focus-overlay {\n    background-color: theming.get-color-from-palette($warn);\n  }\n\n  &.mat-button-disabled .mat-button-focus-overlay {\n    background-color: transparent;\n  }\n}\n\n// Applies the background color for a ripple. If the value provided is not a Sass color,\n// we assume that we've been given a CSS variable. Since we can't perform alpha-blending\n// on a CSS variable, we instead add the opacity directly to the ripple element.\n@mixin _ripple-background($palette, $hue, $opacity) {\n  $background-color: theming.get-color-from-palette($palette, $hue, $opacity);\n  background-color: $background-color;\n  @if (meta.type-of($background-color) != color) {\n    opacity: $opacity;\n  }\n}\n\n@mixin _ripple-color($theme, $hue, $opacity: $_ripple-opacity) {\n  $primary: map.get($theme, primary);\n  $accent: map.get($theme, accent);\n  $warn: map.get($theme, warn);\n\n  &.mat-primary .mat-ripple-element {\n    @include _ripple-background($primary, $hue, $opacity);\n  }\n\n  &.mat-accent .mat-ripple-element {\n    @include _ripple-background($accent, $hue, $opacity);\n  }\n\n  &.mat-warn .mat-ripple-element {\n    @include _ripple-background($warn, $hue, $opacity);\n  }\n}\n\n// Applies a property to an mat-button element for each of the supported palettes.\n@mixin _theme-property($theme, $property, $hue) {\n  $primary: map.get($theme, primary);\n  $accent: map.get($theme, accent);\n  $warn: map.get($theme, warn);\n  $background: map.get($theme, background);\n  $foreground: map.get($theme, foreground);\n\n  &.mat-primary {\n    #{$property}: theming.get-color-from-palette($primary, $hue);\n  }\n  &.mat-accent {\n    #{$property}: theming.get-color-from-palette($accent, $hue);\n  }\n  &.mat-warn {\n    #{$property}: theming.get-color-from-palette($warn, $hue);\n  }\n\n  &.mat-primary, &.mat-accent, &.mat-warn, &.mat-button-disabled {\n    &.mat-button-disabled {\n      $palette: if($property == 'color', $foreground, $background);\n      #{$property}: theming.get-color-from-palette($palette, disabled-button);\n    }\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-button, .mat-icon-button, .mat-stroked-button {\n    // Buttons without a background color should inherit the font color. This is necessary to\n    // ensure that the button is readable on custom background colors. It's wrong to always assume\n    // that those buttons are always placed inside of containers with the default background\n    // color of the theme (e.g. themed toolbars).\n    color: inherit;\n    background: transparent;\n\n    @include _theme-property($config, 'color', text);\n    @include _focus-overlay-color($config);\n\n    // Setup the ripple color to be based on the text color. This ensures that the ripples\n    // are matching with the current theme palette and are in contrast to the background color\n    // (e.g in themed toolbars).\n    .mat-ripple-element {\n      opacity: $_ripple-opacity;\n      background-color: currentColor;\n    }\n  }\n\n  .mat-button-focus-overlay {\n    background: map.get($foreground, base);\n  }\n\n  // Note: this needs a bit extra specificity, because we're not guaranteed the inclusion\n  // order of the theme styles and the button reset may end up resetting this as well.\n  .mat-stroked-button:not(.mat-button-disabled) {\n    border-color: theming.get-color-from-palette($foreground, divider);\n  }\n\n  .mat-flat-button, .mat-raised-button, .mat-fab, .mat-mini-fab {\n    // Default font and background color when not using any color palette.\n    color: theming.get-color-from-palette($foreground, text);\n    background-color: theming.get-color-from-palette($background, raised-button);\n\n    @include _theme-property($config, 'color', default-contrast);\n    @include _theme-property($config, 'background-color', default);\n    @include _ripple-color($config, default-contrast);\n  }\n\n  .mat-stroked-button, .mat-flat-button {\n    @include private.private-theme-overridable-elevation(0, $config);\n  }\n\n  .mat-raised-button {\n    @include private.private-theme-overridable-elevation(2, $config);\n\n    &:not(.mat-button-disabled):active {\n      @include private.private-theme-overridable-elevation(8, $config);\n    }\n\n    &.mat-button-disabled {\n      @include private.private-theme-overridable-elevation(0, $config);\n    }\n  }\n\n  .mat-fab, .mat-mini-fab {\n    @include private.private-theme-overridable-elevation(6, $config);\n\n    &:not(.mat-button-disabled):active {\n      @include private.private-theme-overridable-elevation(12, $config);\n    }\n\n    &.mat-button-disabled {\n      @include private.private-theme-overridable-elevation(0, $config);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-button, .mat-raised-button, .mat-icon-button, .mat-stroked-button,\n  .mat-flat-button, .mat-fab, .mat-mini-fab {\n    font: {\n      family: typography-utils.font-family($config, button);\n      size: typography-utils.font-size($config, button);\n      weight: typography-utils.font-weight($config, button);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-button') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/style/private';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/density/private/compatibility';\n@use './button-toggle-variables';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n  $divider-color: theming.get-color-from-palette($foreground, divider);\n\n  .mat-button-toggle-standalone,\n  .mat-button-toggle-group {\n    @include private.private-theme-elevation(2, $config);\n  }\n\n  .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,\n  .mat-button-toggle-group-appearance-standard {\n    box-shadow: none;\n  }\n\n  .mat-button-toggle {\n    color: theming.get-color-from-palette($foreground, hint-text);\n\n    .mat-button-toggle-focus-overlay {\n      background-color: theming.get-color-from-palette($background, focused-button);\n    }\n  }\n\n  .mat-button-toggle-appearance-standard {\n    color: theming.get-color-from-palette($foreground, text);\n    background: theming.get-color-from-palette($background, card);\n\n    .mat-button-toggle-focus-overlay {\n      background-color: theming.get-color-from-palette($background, focused-button, 1);\n    }\n  }\n\n  .mat-button-toggle-group-appearance-standard .mat-button-toggle + .mat-button-toggle {\n    border-left: solid 1px $divider-color;\n  }\n\n  [dir='rtl'] .mat-button-toggle-group-appearance-standard .mat-button-toggle + .mat-button-toggle {\n    border-left: none;\n    border-right: solid 1px $divider-color;\n  }\n\n  .mat-button-toggle-group-appearance-standard.mat-button-toggle-vertical {\n    .mat-button-toggle + .mat-button-toggle {\n      border-left: none;\n      border-right: none;\n      border-top: solid 1px $divider-color;\n    }\n  }\n\n  .mat-button-toggle-checked {\n    background-color: theming.get-color-from-palette($background, selected-button);\n    color: theming.get-color-from-palette($foreground, secondary-text);\n\n    &.mat-button-toggle-appearance-standard {\n      color: theming.get-color-from-palette($foreground, text);\n    }\n  }\n\n  .mat-button-toggle-disabled {\n    color: theming.get-color-from-palette($foreground, disabled-button);\n    background-color: theming.get-color-from-palette($background, disabled-button-toggle);\n\n    &.mat-button-toggle-appearance-standard {\n      background: theming.get-color-from-palette($background, card);\n    }\n\n    &.mat-button-toggle-checked {\n      background-color: theming.get-color-from-palette($background, selected-disabled-button);\n    }\n  }\n\n  .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,\n  .mat-button-toggle-group-appearance-standard {\n    border: solid 1px $divider-color;\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-button-toggle {\n    font-family: typography-utils.font-family($config);\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $standard-height: compatibility.private-density-prop-value(\n      button-toggle-variables.$standard-density-config, $density-scale, height);\n\n  @include compatibility.private-density-legacy-compatibility() {\n    .mat-button-toggle-appearance-standard .mat-button-toggle-label-content {\n      line-height: $standard-height;\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-button-toggle') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/style/private';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-card {\n    @include private.private-theme-overridable-elevation(1, $config);\n    background: theming.get-color-from-palette($background, card);\n    color: theming.get-color-from-palette($foreground, text);\n\n    // Needs extra specificity to be able to override the elevation selectors.\n    &.mat-card-flat {\n      @include private.private-theme-overridable-elevation(0, $config);\n    }\n  }\n\n  .mat-card-subtitle {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-card {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-card-title {\n    font: {\n      size: typography-utils.font-size($config, headline);\n      weight: typography-utils.font-weight($config, title);\n    }\n  }\n\n  .mat-card-header .mat-card-title {\n    font-size: typography-utils.font-size($config, title);\n  }\n\n  .mat-card-subtitle,\n  .mat-card-content {\n    font-size: typography-utils.font-size($config, body-1);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-card') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $is-dark-theme: map.get($config, is-dark);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n\n  // The color of the checkbox's checkmark / mixedmark.\n  $checkbox-mark-color: theming.get-color-from-palette($background, background);\n\n  // NOTE(traviskaufman): While the spec calls for translucent blacks/whites for disabled colors,\n  // this does not work well with elements layered on top of one another. To get around this we\n  // blend the colors together based on the base color and the theme background.\n  $white-30pct-opacity-on-dark: #686868;\n  $black-26pct-opacity-on-light: #b0b0b0;\n  $disabled-color: if($is-dark-theme, $white-30pct-opacity-on-dark, $black-26pct-opacity-on-light);\n\n  .mat-checkbox-frame {\n    border-color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-checkbox-checkmark {\n    fill: $checkbox-mark-color;\n  }\n\n  .mat-checkbox-checkmark-path {\n    // !important is needed here because a stroke must be set as an\n    // attribute on the SVG in order for line animation to work properly.\n    stroke: $checkbox-mark-color !important;\n  }\n\n  .mat-checkbox-mixedmark {\n    background-color: $checkbox-mark-color;\n  }\n\n  .mat-checkbox-indeterminate, .mat-checkbox-checked {\n    &.mat-primary .mat-checkbox-background {\n      background-color: theming.get-color-from-palette($primary);\n    }\n\n    &.mat-accent .mat-checkbox-background {\n      background-color: theming.get-color-from-palette($accent);\n    }\n\n    &.mat-warn .mat-checkbox-background {\n      background-color: theming.get-color-from-palette($warn);\n    }\n  }\n\n  .mat-checkbox-disabled {\n    &.mat-checkbox-checked,\n    &.mat-checkbox-indeterminate {\n      .mat-checkbox-background {\n        background-color: $disabled-color;\n      }\n    }\n\n    &:not(.mat-checkbox-checked) {\n      .mat-checkbox-frame {\n        border-color: $disabled-color;\n      }\n    }\n\n    .mat-checkbox-label {\n      color: theming.get-color-from-palette($foreground, secondary-text);\n    }\n  }\n\n  // Switch this to a solid color since we're using `opacity`\n  // to control how opaque the ripple should be.\n  .mat-checkbox .mat-ripple-element {\n    background-color: map.get(map.get($config, foreground), base);\n  }\n\n  .mat-checkbox-checked:not(.mat-checkbox-disabled),\n  .mat-checkbox:active:not(.mat-checkbox-disabled) {\n    &.mat-primary .mat-ripple-element {\n      background: theming.get-color-from-palette($primary);\n    }\n\n    &.mat-accent .mat-ripple-element {\n      background: theming.get-color-from-palette($accent);\n    }\n\n    &.mat-warn .mat-ripple-element {\n      background: theming.get-color-from-palette($warn);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-checkbox {\n    font-family: typography-utils.font-family($config);\n  }\n\n  // TODO(kara): Remove this style when fixing vertical baseline\n  .mat-checkbox-layout .mat-checkbox-label {\n    line-height: typography-utils.line-height($config, body-2);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-checkbox') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:meta';\n@use '../core/style/private';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n$chip-remove-font-size: 18px;\n\n@mixin _element-color($foreground, $background) {\n  background-color: $background;\n  color: $foreground;\n\n  .mat-chip-remove {\n    color: $foreground;\n    opacity: 0.4;\n  }\n}\n\n\n// Applies the background color for a ripple element.\n// If the color value provided is not a Sass color,\n// we assume that we've been given a CSS variable.\n// Since we can't perform alpha-blending on a CSS variable,\n// we instead add the opacity directly to the ripple element.\n@mixin _ripple-background($palette, $default-contrast, $opacity) {\n  $background-color: theming.get-color-from-palette($palette, $default-contrast, $opacity);\n  background-color: $background-color;\n  @if (meta.type-of($background-color) != color) {\n    opacity: $opacity;\n  }\n}\n\n@mixin _palette-styles($palette) {\n  @include _element-color(theming.get-color-from-palette($palette, default-contrast),\n    theming.get-color-from-palette($palette));\n\n  .mat-ripple-element {\n    @include _ripple-background($palette, default-contrast, 0.1);\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $is-dark-theme: map.get($config, is-dark);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  $unselected-background: theming.get-color-from-palette($background, unselected-chip);\n  $unselected-foreground: theming.get-color-from-palette($foreground, text);\n\n  .mat-chip.mat-standard-chip {\n    @include _element-color($unselected-foreground, $unselected-background);\n\n    &:not(.mat-chip-disabled) {\n      &:active {\n        @include private.private-theme-elevation(3, $config);\n      }\n\n      .mat-chip-remove:hover {\n        opacity: 0.54;\n      }\n    }\n\n    &.mat-chip-disabled {\n      opacity: 0.4;\n    }\n\n    &::after {\n      background: map.get($foreground, base);\n    }\n  }\n\n  .mat-chip.mat-standard-chip.mat-chip-selected {\n    &.mat-primary {\n      @include _palette-styles($primary);\n    }\n\n    &.mat-warn {\n      @include _palette-styles($warn);\n    }\n\n    &.mat-accent {\n      @include _palette-styles($accent);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-chip {\n    font-size: typography-utils.font-size($config, body-2);\n    font-weight: typography-utils.font-weight($config, body-2);\n\n    .mat-chip-trailing-icon.mat-icon,\n    .mat-chip-remove.mat-icon {\n      font-size: $chip-remove-font-size;\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-chips') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-table {\n    background: theming.get-color-from-palette($background, 'card');\n  }\n\n  .mat-table thead, .mat-table tbody, .mat-table tfoot,\n  mat-header-row, mat-row, mat-footer-row,\n  [mat-header-row], [mat-row], [mat-footer-row],\n  .mat-table-sticky {\n    background: inherit;\n  }\n\n  mat-row, mat-header-row, mat-footer-row,\n  th.mat-header-cell, td.mat-cell, td.mat-footer-cell {\n    border-bottom-color: theming.get-color-from-palette($foreground, divider);\n  }\n\n  .mat-header-cell {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-cell, .mat-footer-cell {\n    color: theming.get-color-from-palette($foreground, text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-table {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-header-cell {\n    font-size: typography-utils.font-size($config, caption);\n    font-weight: typography-utils.font-weight($config, body-2);\n  }\n\n  .mat-cell, .mat-footer-cell {\n    font-size: typography-utils.font-size($config, body-1);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-table') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:color';\n@use 'sass:map';\n@use 'sass:math';\n@use 'sass:meta';\n@use '../core/style/private';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n$selected-today-box-shadow-width: 1px;\n$selected-fade-amount: 0.6;\n$range-fade-amount: 0.2;\n$today-fade-amount: 0.2;\n$calendar-body-font-size: 13px !default;\n$calendar-weekday-table-font-size: 11px !default;\n\n@mixin _color($palette) {\n  @include date-range-colors(\n    theming.get-color-from-palette($palette, default, $range-fade-amount));\n\n  .mat-calendar-body-selected {\n    background-color: theming.get-color-from-palette($palette);\n    color: theming.get-color-from-palette($palette, default-contrast);\n  }\n\n  .mat-calendar-body-disabled > .mat-calendar-body-selected {\n    $background: theming.get-color-from-palette($palette);\n\n    @if (meta.type-of($background) == color) {\n      background-color: color.adjust($background, $alpha: -$selected-fade-amount);\n    }\n    @else {\n      // If we couldn't resolve to background to a color (e.g. it's a CSS variable),\n      // fall back to fading the content out via `opacity`.\n      opacity: $today-fade-amount;\n    }\n  }\n\n  .mat-calendar-body-today.mat-calendar-body-selected {\n    box-shadow: inset 0 0 0 $selected-today-box-shadow-width\n                theming.get-color-from-palette($palette, default-contrast);\n  }\n\n  .mat-calendar-body-cell:not(.mat-calendar-body-disabled):hover,\n  .cdk-keyboard-focused .mat-calendar-body-active,\n  .cdk-program-focused .mat-calendar-body-active {\n    & > .mat-calendar-body-cell-content {\n      @include _unselected-cell {\n        background-color: theming.get-color-from-palette($palette, 0.3);\n      }\n    }\n  }\n}\n\n// Utility mixin to target cells that aren't selected. Used to make selector easier to follow.\n@mixin _unselected-cell {\n  &:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical) {\n    @content;\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n  $disabled-color: theming.get-color-from-palette($foreground, disabled-text);\n\n  .mat-calendar-arrow {\n    border-top-color: theming.get-color-from-palette($foreground, icon);\n  }\n\n  // The prev/next buttons need a bit more specificity to\n  // avoid being overwritten by the .mat-icon-button.\n  .mat-datepicker-toggle,\n  .mat-datepicker-content .mat-calendar-next-button,\n  .mat-datepicker-content .mat-calendar-previous-button {\n    color: theming.get-color-from-palette($foreground, icon);\n  }\n\n  .mat-calendar-table-header-divider::after {\n    background: theming.get-color-from-palette($foreground, divider);\n  }\n\n  .mat-calendar-table-header,\n  .mat-calendar-body-label {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-calendar-body-cell-content,\n  .mat-date-range-input-separator {\n    color: theming.get-color-from-palette($foreground, text);\n    border-color: transparent;\n  }\n\n  .mat-calendar-body-disabled > .mat-calendar-body-cell-content {\n    @include _unselected-cell {\n      color: $disabled-color;\n    }\n  }\n\n  .mat-form-field-disabled .mat-date-range-input-separator {\n    color: $disabled-color;\n  }\n\n  .mat-calendar-body-in-preview {\n    $divider-color: theming.get-color-from-palette($foreground, divider);\n\n    @if meta.type-of($divider-color) == color {\n      // The divider color is set under the assumption that it'll be used\n      // for a solid border, but because we're using a dashed border for the\n      // preview range, we need to bump its opacity to ensure that it's visible.\n      color: rgba($divider-color, math.min(opacity($divider-color) * 2, 1));\n    }\n    @else {\n      color: $divider-color;\n    }\n  }\n\n  .mat-calendar-body-today {\n    @include _unselected-cell {\n      // Note: though it's not text, the border is a hint about the fact that this is today's date,\n      // so we use the hint color.\n      border-color: theming.get-color-from-palette($foreground, hint-text);\n    }\n  }\n\n  .mat-calendar-body-disabled > .mat-calendar-body-today {\n    @include _unselected-cell {\n      $color: theming.get-color-from-palette($foreground, hint-text);\n\n      @if (meta.type-of($color) == color) {\n        border-color: color.adjust($color, $alpha: -$today-fade-amount);\n      }\n      @else {\n        // If the color didn't resolve to a color value, but something like a CSS variable, we can't\n        // fade it out so we fall back to reducing the element opacity. Note that we don't use the\n        // $mat-datepicker-today-fade-amount, because hint text usually has some opacity applied\n        // to it already and we don't want them to stack on top of each other.\n        opacity: 0.5;\n      }\n    }\n  }\n\n  @include _color(map.get($config, primary));\n\n  .mat-datepicker-content {\n    @include private.private-theme-elevation(4, $config);\n    background-color: theming.get-color-from-palette($background, card);\n    color: theming.get-color-from-palette($foreground, text);\n\n    &.mat-accent {\n      @include _color(map.get($config, accent));\n    }\n\n    &.mat-warn {\n      @include _color(map.get($config, warn));\n    }\n  }\n\n  .mat-datepicker-content-touch {\n    @include private.private-theme-elevation(24, $config);\n  }\n\n  .mat-datepicker-toggle-active {\n    color: theming.get-color-from-palette(map.get($config, primary), text);\n\n    &.mat-accent {\n      color: theming.get-color-from-palette(map.get($config, accent), text);\n    }\n\n    &.mat-warn {\n      color: theming.get-color-from-palette(map.get($config, warn), text);\n    }\n  }\n\n  .mat-date-range-input-inner[disabled] {\n    color: theming.get-color-from-palette($foreground, disabled-text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-calendar {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-calendar-body {\n    font-size: $calendar-body-font-size;\n  }\n\n  .mat-calendar-body-label,\n  .mat-calendar-period-button {\n    font: {\n      size: typography-utils.font-size($config, button);\n      weight: typography-utils.font-weight($config, button);\n    }\n  }\n\n  .mat-calendar-table-header th {\n    font: {\n      size: $calendar-weekday-table-font-size;\n      weight: typography-utils.font-weight($config, body-1);\n    }\n  }\n}\n\n@mixin date-range-colors(\n  $range-color,\n  $comparison-color: rgba(#f9ab00, $range-fade-amount),\n  $overlap-color: #a8dab5,\n  $overlap-selected-color: color.adjust($overlap-color, $lightness: -30%)) {\n\n  .mat-calendar-body-in-range::before {\n    background: $range-color;\n  }\n\n  .mat-calendar-body-comparison-identical,\n  .mat-calendar-body-in-comparison-range::before {\n    background: $comparison-color;\n  }\n\n  .mat-calendar-body-comparison-bridge-start::before,\n  [dir='rtl'] .mat-calendar-body-comparison-bridge-end::before {\n    background: linear-gradient(to right, $range-color 50%, $comparison-color 50%);\n  }\n\n  .mat-calendar-body-comparison-bridge-end::before,\n  [dir='rtl'] .mat-calendar-body-comparison-bridge-start::before {\n    background: linear-gradient(to left, $range-color 50%, $comparison-color 50%);\n  }\n\n  .mat-calendar-body-in-range > .mat-calendar-body-comparison-identical,\n  .mat-calendar-body-in-comparison-range.mat-calendar-body-in-range::after {\n    background: $overlap-color;\n  }\n\n  .mat-calendar-body-comparison-identical.mat-calendar-body-selected,\n  .mat-calendar-body-in-comparison-range > .mat-calendar-body-selected {\n    background: $overlap-selected-color;\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-datepicker') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/style/private';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-dialog-container {\n    @include private.private-theme-elevation(24, $config);\n    background: theming.get-color-from-palette($background, dialog);\n    color: theming.get-color-from-palette($foreground, text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-dialog-title {\n    @include typography-utils.typography-level($config, title);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-dialog') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/density/private/compatibility';\n@use '../core/theming/theming';\n@use '../core/style/private';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use './expansion-variables';\n@use './expansion-mixins';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-expansion-panel {\n    @include private.private-theme-overridable-elevation(2, $config);\n    background: theming.get-color-from-palette($background, card);\n    color: theming.get-color-from-palette($foreground, text);\n  }\n\n  .mat-action-row {\n    border-top-color: theming.get-color-from-palette($foreground, divider);\n  }\n\n  @include expansion-mixins.private-expansion-focus {\n    background: theming.get-color-from-palette($background, hover);\n  }\n\n  // Disable the hover on touch devices since it can appear like it is stuck. We can't use\n  // `@media (hover)` above, because the desktop support browser support isn't great.\n  @media (hover: none) {\n    .mat-expansion-panel:not(.mat-expanded):not([aria-disabled='true'])\n      .mat-expansion-panel-header:hover {\n      background: theming.get-color-from-palette($background, card);\n    }\n  }\n\n  .mat-expansion-panel-header-title {\n    color: theming.get-color-from-palette($foreground, text);\n  }\n\n  .mat-expansion-panel-header-description,\n  .mat-expansion-indicator::after {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-expansion-panel-header[aria-disabled='true'] {\n    color: theming.get-color-from-palette($foreground, disabled-button);\n\n    .mat-expansion-panel-header-title,\n    .mat-expansion-panel-header-description {\n      color: inherit;\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-expansion-panel-header {\n    font: {\n      family: typography-utils.font-family($config, subheading-1);\n      size: typography-utils.font-size($config, subheading-1);\n      weight: typography-utils.font-weight($config, subheading-1);\n    }\n  }\n\n  .mat-expansion-panel-content {\n    @include typography-utils.typography-level($config, body-1);\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $expanded-height: compatibility.private-density-prop-value(\n        expansion-variables.$header-density-config, $density-scale, expanded-height);\n  $collapsed-height: compatibility.private-density-prop-value(\n      expansion-variables.$header-density-config, $density-scale, collapsed-height);\n\n  @include compatibility.private-density-legacy-compatibility() {\n    .mat-expansion-panel-header {\n      height: $collapsed-height;\n\n      &.mat-expanded {\n        height: $expanded-height;\n      }\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-expansion') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/style/private';\n\n@use './form-field-fill-theme.scss';\n@use './form-field-legacy-theme.scss';\n@use './form-field-outline-theme.scss';\n@use './form-field-standard-theme.scss';\n\n// Color styles that apply to all appearances of the form-field.\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n  $is-dark-theme: map.get($config, is-dark);\n\n  // Label colors. Required is used for the `*` star shown in the label.\n  $label-color:\n    theming.get-color-from-palette($foreground, secondary-text, if($is-dark-theme, 0.7, 0.6));\n  $focused-label-color: theming.get-color-from-palette($primary, text);\n  $required-label-color: theming.get-color-from-palette($accent, text);\n\n  // Underline colors.\n  $underline-color-base:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 1, 0.87));\n  $underline-color-accent: theming.get-color-from-palette($accent, text);\n  $underline-color-warn: theming.get-color-from-palette($warn, text);\n  $underline-focused-color: theming.get-color-from-palette($primary, text);\n\n  .mat-form-field-label {\n    color: $label-color;\n  }\n\n  .mat-hint {\n    color: $label-color;\n  }\n\n  .mat-form-field.mat-focused .mat-form-field-label {\n    color: $focused-label-color;\n\n    &.mat-accent {\n      color: $underline-color-accent;\n    }\n\n    &.mat-warn {\n      color: $underline-color-warn;\n    }\n  }\n\n  .mat-focused .mat-form-field-required-marker {\n    color: $required-label-color;\n  }\n\n  .mat-form-field-ripple {\n    background-color: $underline-color-base;\n  }\n\n  .mat-form-field.mat-focused {\n    .mat-form-field-ripple {\n      background-color: $underline-focused-color;\n\n      &.mat-accent {\n        background-color: $underline-color-accent;\n      }\n\n      &.mat-warn {\n        background-color: $underline-color-warn;\n      }\n    }\n  }\n\n  .mat-form-field-type-mat-native-select.mat-focused:not(.mat-form-field-invalid) {\n    .mat-form-field-infix::after {\n      color: $underline-focused-color;\n    }\n\n    &.mat-accent .mat-form-field-infix::after {\n      color: $underline-color-accent;\n    }\n\n    &.mat-warn .mat-form-field-infix::after {\n      color: $underline-color-warn;\n    }\n  }\n\n  // Styling for the error state of the form field. Note that while the same can be\n  // achieved with the ng-* classes, we use this approach in order to ensure that the same\n  // logic is used to style the error state and to show the error messages.\n  .mat-form-field.mat-form-field-invalid {\n    .mat-form-field-label {\n      color: $underline-color-warn;\n\n      &.mat-accent,\n      .mat-form-field-required-marker {\n        color: $underline-color-warn;\n      }\n    }\n\n    .mat-form-field-ripple,\n    .mat-form-field-ripple.mat-accent {\n      background-color: $underline-color-warn;\n    }\n  }\n\n  .mat-error {\n    color: $underline-color-warn;\n  }\n\n  @include form-field-legacy-theme.legacy-color($config);\n  @include form-field-standard-theme.standard-color($config);\n  @include form-field-fill-theme.fill-color($config);\n  @include form-field-outline-theme.outline-color($config);\n}\n\n// Used to make instances of the _mat-form-field-label-floating mixin negligibly different,\n// and prevent Google's CSS Optimizer from collapsing the declarations. This is needed because some\n// of the selectors contain pseudo-classes not recognized in all browsers. If a browser encounters\n// an unknown pseudo-class it will discard the entire rule set.\n$dedupe: 0;\n\n// Applies a floating label above the form field control itself.\n@mixin _label-floating($font-scale, $infix-padding, $infix-margin-top) {\n  transform: translateY(-$infix-margin-top - $infix-padding + $dedupe)\n             scale($font-scale);\n  width: private.private-div(100%, $font-scale) + $dedupe;\n\n  $dedupe: $dedupe + 0.00001 !global;\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  // The unit-less line-height from the font config.\n  $line-height: typography-utils.line-height($config, input);\n\n  // The amount to scale the font for the floating label and subscript.\n  $subscript-font-scale: 0.75;\n  // The amount to scale the font for the prefix and suffix icons.\n  $prefix-suffix-icon-font-scale: 1.5;\n\n  // The padding on the infix. Mocks show half of the text size.\n  $infix-padding: 0.5em;\n  // The margin applied to the form-field-infix to reserve space for the floating label.\n  // If the line-height is given as a unitless number, coerce it to `em`.\n  $infix-margin-top: $subscript-font-scale *\n      typography-utils.private-coerce-unitless-to-em($line-height);\n  // Font size to use for the label and subscript text.\n  $subscript-font-size: $subscript-font-scale * 100%;\n  // Font size to use for the for the prefix and suffix icons.\n  $prefix-suffix-icon-font-size: $prefix-suffix-icon-font-scale * 100%;\n  // The space between the bottom of the .mat-form-field-flex area and the subscript wrapper.\n  // Mocks show half of the text size, but this margin is applied to an element with the subscript\n  // text font size, so we need to divide by the scale factor to make it half of the original text\n  // size.\n  $subscript-margin-top: private.private-div(0.5em, $subscript-font-scale);\n  // The padding applied to the form-field-wrapper to reserve space for the subscript, since it's\n  // absolutely positioned. This is a combination of the subscript's margin and line-height, but we\n  // need to multiply by the subscript font scale factor since the wrapper has a larger font size.\n  $wrapper-padding-bottom: ($subscript-margin-top + $line-height) * $subscript-font-scale;\n\n  .mat-form-field {\n    @include typography-utils.typography-level($config, input);\n  }\n\n  .mat-form-field-wrapper {\n    padding-bottom: $wrapper-padding-bottom;\n  }\n\n  .mat-form-field-prefix,\n  .mat-form-field-suffix {\n    // Allow icons in a prefix or suffix to adapt to the correct size.\n    .mat-icon {\n      font-size: $prefix-suffix-icon-font-size;\n      line-height: $line-height;\n    }\n\n    // Allow icon buttons in a prefix or suffix to adapt to the correct size.\n    .mat-icon-button {\n      height: $prefix-suffix-icon-font-scale * 1em;\n      width: $prefix-suffix-icon-font-scale * 1em;\n\n      .mat-icon {\n        height: typography-utils.private-coerce-unitless-to-em($line-height);\n        line-height: $line-height;\n      }\n    }\n  }\n\n  .mat-form-field-infix {\n    padding: $infix-padding 0;\n    // Throws off the baseline if we do it as a real margin, so we do it as a border instead.\n    border-top: $infix-margin-top solid transparent;\n  }\n\n  .mat-form-field-can-float {\n    &.mat-form-field-should-float .mat-form-field-label,\n    .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n      @include _label-floating(\n              $subscript-font-scale, $infix-padding, $infix-margin-top);\n    }\n\n    // Server-side rendered matInput with a label attribute but label not shown\n    // (used as a pure CSS stand-in for mat-form-field-should-float).\n    .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n        .mat-form-field-label {\n      @include _label-floating(\n              $subscript-font-scale, $infix-padding, $infix-margin-top);\n    }\n  }\n\n  .mat-form-field-label-wrapper {\n    top: -$infix-margin-top;\n    padding-top: $infix-margin-top;\n  }\n\n  .mat-form-field-label {\n    top: $infix-margin-top + $infix-padding;\n  }\n\n  .mat-form-field-underline {\n    // We want the underline to start at the end of the content box, not the padding box,\n    // so we move it up by the padding amount.\n    bottom: $wrapper-padding-bottom;\n  }\n\n  .mat-form-field-subscript-wrapper {\n    font-size: $subscript-font-size;\n    margin-top: $subscript-margin-top;\n\n    // We want the subscript to start at the end of the content box, not the padding box,\n    // so we move it up by the padding amount (adjusted for the smaller font size);\n    top: calc(100% - #{private.private-div($wrapper-padding-bottom, $subscript-font-scale)});\n  }\n\n  @include form-field-legacy-theme.legacy-typography($config);\n  @include form-field-standard-theme.standard-typography($config);\n  @include form-field-fill-theme.fill-typography($config);\n  @include form-field-outline-theme.outline-typography($config);\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  @include form-field-legacy-theme.private-form-field-legacy-density($density-scale);\n  @include form-field-standard-theme.private-form-field-standard-density($density-scale);\n  @include form-field-fill-theme.private-form-field-fill-density($density-scale);\n  @include form-field-outline-theme.private-form-field-outline-density($density-scale);\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-form-field') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/style/private';\n@use '../core/style/form-common';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n// Theme styles that only apply to the legacy appearance of the form-field.\n\n@mixin legacy-color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $is-dark-theme: map.get($config, is-dark);\n\n  $label-color: theming.get-color-from-palette($foreground, secondary-text);\n  $underline-color:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 0.7, 0.42));\n\n  .mat-form-field-appearance-legacy {\n    .mat-form-field-label {\n      color: $label-color;\n    }\n\n    .mat-hint {\n      color: $label-color;\n    }\n\n    .mat-form-field-underline {\n      background-color: $underline-color;\n    }\n\n    &.mat-form-field-disabled .mat-form-field-underline {\n      @include form-common.private-control-disabled-underline($underline-color);\n    }\n  }\n}\n\n// Used to make instances of the _mat-form-field-label-floating mixin negligibly different,\n// and prevent Google's CSS Optimizer from collapsing the declarations. This is needed because some\n// of the selectors contain pseudo-classes not recognized in all browsers. If a browser encounters\n// an unknown pseudo-class it will discard the entire rule set.\n$legacy-dedupe: 0;\n\n// Applies a floating label above the form field control itself.\n@mixin _label-floating($font-scale, $infix-padding, $infix-margin-top) {\n  // We use perspective to fix the text blurriness as described here:\n  // http://www.useragentman.com/blog/2014/05/04/fixing-typography-inside-of-2-d-css-transforms/\n  // This results in a small jitter after the label floats on Firefox, which the\n  // translateZ fixes.\n  transform: translateY(-$infix-margin-top - $infix-padding) scale($font-scale) perspective(100px)\n  translateZ(0.001px + $legacy-dedupe);\n  // The tricks above used to smooth out the animation on chrome and firefox actually make things\n  // worse on IE, so we don't include them in the IE version.\n  -ms-transform: translateY(-$infix-margin-top - $infix-padding + $legacy-dedupe)\n                  scale($font-scale);\n\n  width: private.private-div(100%, $font-scale) + $legacy-dedupe;\n\n  $legacy-dedupe: $legacy-dedupe + 0.00001 !global;\n}\n\n// Same as mixin above, but omits the translateZ for printing purposes.\n@mixin _label-floating-print($font-scale, $infix-padding, $infix-margin-top) {\n  // This results in a small jitter after the label floats on Firefox, which the\n  // translateZ fixes.\n  transform: translateY(-$infix-margin-top - $infix-padding + $legacy-dedupe)\n                  scale($font-scale);\n  // The tricks above used to smooth out the animation on chrome and firefox actually make things\n  // worse on IE, so we don't include them in the IE version.\n  $legacy-dedupe: $legacy-dedupe + 0.00001 !global;\n}\n\n@mixin legacy-typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  // The unit-less line-height from the font config.\n  $line-height: typography-utils.line-height($config, input);\n  // The amount to scale the font for the floating label and subscript.\n  $subscript-font-scale: 0.75;\n  // The amount of space between the top of the line and the top of the actual text\n  // (as a fraction of the font-size).\n  $line-spacing: private.private-div($line-height - 1, 2);\n  // The padding on the infix. Mocks show half of the text size, but seem to measure from the edge\n  // of the text itself, not the edge of the line; therefore we subtract off the line spacing.\n  $infix-padding: 0.5em - $line-spacing;\n  // The margin applied to the form-field-infix to reserve space for the floating label.\n  // If the line-height is given as a unitless number, coerce it to `em`.\n  $infix-margin-top:\n      $subscript-font-scale * typography-utils.private-coerce-unitless-to-em($line-height);\n  // The space between the bottom of the .mat-form-field-flex area and the subscript wrapper.\n  // Mocks show half of the text size, but this margin is applied to an element with the subscript\n  // text font size, so we need to divide by the scale factor to make it half of the original text\n  // size. We again need to subtract off the line spacing since the mocks measure to the edge of the\n  // text, not the  edge of the line.\n  $subscript-margin-top: private.private-div(0.5em, $subscript-font-scale) - ($line-spacing * 2);\n  // The padding applied to the form-field-wrapper to reserve space for the subscript, since it's\n  // absolutely positioned. This is a combination of the subscript's margin and line-height, but we\n  // need to multiply by the subscript font scale factor since the wrapper has a larger font size.\n  $wrapper-padding-bottom: ($subscript-margin-top + $line-height) * $subscript-font-scale;\n\n  .mat-form-field-appearance-legacy {\n    .mat-form-field-wrapper {\n      padding-bottom: $wrapper-padding-bottom;\n    }\n\n    .mat-form-field-infix {\n      padding: $infix-padding 0;\n    }\n\n    &.mat-form-field-can-float {\n      &.mat-form-field-should-float .mat-form-field-label,\n      .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding, $infix-margin-top);\n      }\n\n      // @breaking-change 8.0.0 will rely on AutofillMonitor instead.\n      .mat-form-field-autofill-control:-webkit-autofill + .mat-form-field-label-wrapper\n      .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding, $infix-margin-top);\n      }\n\n      // Server-side rendered matInput with a label attribute but label not shown\n      // (used as a pure CSS stand-in for mat-form-field-should-float).\n      .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n      .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding, $infix-margin-top);\n      }\n    }\n\n    .mat-form-field-label {\n      top: $infix-margin-top + $infix-padding;\n    }\n\n    .mat-form-field-underline {\n      // We want the underline to start at the end of the content box, not the padding box,\n      // so we move it up by the padding amount.\n      bottom: $wrapper-padding-bottom;\n    }\n\n    .mat-form-field-subscript-wrapper {\n      margin-top: $subscript-margin-top;\n\n      // We want the subscript to start at the end of the content box, not the padding box,\n      // so we move it up by the padding amount (adjusted for the smaller font size);\n      top: calc(100% - #{private.private-div($wrapper-padding-bottom, $subscript-font-scale)});\n    }\n  }\n\n  // translateZ causes the label to not appear while printing, so we override it to not\n  // apply translateZ while printing\n  @media print {\n    .mat-form-field-appearance-legacy {\n      &.mat-form-field-can-float {\n        &.mat-form-field-should-float .mat-form-field-label,\n        .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n          @include _label-floating-print(\n                  $subscript-font-scale, $infix-padding, $infix-margin-top);\n        }\n\n        // @breaking-change 8.0.0 will rely on AutofillMonitor instead.\n        .mat-form-field-autofill-control:-webkit-autofill + .mat-form-field-label-wrapper\n        .mat-form-field-label {\n          @include _label-floating-print(\n                  $subscript-font-scale, $infix-padding, $infix-margin-top);\n        }\n\n        // Server-side rendered matInput with a label attribute but label not shown\n        // (used as a pure CSS stand-in for mat-form-field-should-float).\n        .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n        .mat-form-field-label {\n          @include _label-floating-print(\n                  $subscript-font-scale, $infix-padding, $infix-margin-top);\n        }\n      }\n    }\n  }\n}\n\n@mixin private-form-field-legacy-density($config-or-theme) {}\n\n@mixin legacy-theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-form-field-legacy') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include legacy-color($color);\n    }\n    @if $density != null {\n      @include private-form-field-legacy-density($density);\n    }\n    @if $typography != null {\n      @include legacy-typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/style/private';\n\n\n// Theme styles that only apply to the fill appearance of the form-field.\n\n@mixin fill-color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $is-dark-theme: map.get($config, is-dark);\n\n  $fill-background:\n    theming.get-color-from-palette($foreground, base, if($is-dark-theme, 0.1, 0.04));\n  $fill-disabled-background:\n    theming.get-color-from-palette($foreground, base, if($is-dark-theme, 0.05, 0.02));\n  $underline-color:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 0.5, 0.42));\n  $label-disabled-color: theming.get-color-from-palette($foreground, disabled-text);\n\n  .mat-form-field-appearance-fill {\n    .mat-form-field-flex {\n      background-color: $fill-background;\n    }\n\n    &.mat-form-field-disabled .mat-form-field-flex {\n      background-color: $fill-disabled-background;\n    }\n\n    .mat-form-field-underline::before {\n      background-color: $underline-color;\n    }\n\n    &.mat-form-field-disabled {\n      .mat-form-field-label {\n        color: $label-disabled-color;\n      }\n\n      .mat-form-field-underline::before {\n        background-color: transparent;\n      }\n    }\n  }\n}\n\n// Used to make instances of the _mat-form-field-label-floating mixin negligibly different,\n// and prevent Google's CSS Optimizer from collapsing the declarations. This is needed because some\n// of the selectors contain pseudo-classes not recognized in all browsers. If a browser encounters\n// an unknown pseudo-class it will discard the entire rule set.\n$fill-dedupe: 0;\n\n// Applies a floating label above the form field control itself.\n@mixin _label-floating($font-scale, $infix-padding, $infix-margin-top) {\n  transform: translateY(-$infix-margin-top - $infix-padding + $fill-dedupe)\n             scale($font-scale);\n  width: private.private-div(100%, $font-scale) + $fill-dedupe;\n\n  $fill-dedupe: $fill-dedupe + 0.00001 !global;\n}\n\n@mixin fill-typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  // The unit-less line-height from the font config.\n  $line-height: typography-utils.line-height($config, input);\n  // The amount to scale the font for the floating label and subscript.\n  $subscript-font-scale: 0.75;\n  // The padding on top of the infix.\n  $infix-padding-top: 0.25em;\n  // The padding below the infix.\n  $infix-padding-bottom: 0.75em;\n  // The margin applied to the form-field-infix to reserve space for the floating label.\n  $infix-margin-top:\n      $subscript-font-scale * typography-utils.private-coerce-unitless-to-em($line-height);\n  // The amount we offset the label from the input text in the fill appearance.\n  $fill-appearance-label-offset: -0.5em;\n\n  .mat-form-field-appearance-fill {\n    .mat-form-field-infix {\n      padding: $infix-padding-top 0 $infix-padding-bottom 0;\n    }\n\n    .mat-form-field-label {\n      top: $infix-margin-top + $infix-padding-top;\n      margin-top: $fill-appearance-label-offset;\n    }\n\n    &.mat-form-field-can-float {\n      &.mat-form-field-should-float .mat-form-field-label,\n      .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding-top + $fill-appearance-label-offset,\n                $infix-margin-top);\n      }\n\n      // Server-side rendered matInput with a label attribute but label not shown\n      // (used as a pure CSS stand-in for mat-form-field-should-float).\n      .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n      .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding-top + $fill-appearance-label-offset,\n                $infix-margin-top);\n      }\n    }\n  }\n}\n\n@mixin private-form-field-fill-density($config-or-theme) {}\n\n@mixin fill-theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-form-field-fill') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include fill-color($color);\n    }\n    @if $density != null {\n      @include private-form-field-fill-density($density);\n    }\n    @if $typography != null {\n      @include fill-typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/style/private';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n// Theme styles that only apply to the outline appearance of the form-field.\n\n@mixin outline-color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $foreground: map.get($config, foreground);\n  $is-dark-theme: map.get($config, is-dark);\n\n  $label-disabled-color: theming.get-color-from-palette($foreground, disabled-text);\n  $outline-color:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 0.3, 0.12));\n  $outline-color-hover:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 1, 0.87));\n  $outline-color-primary: theming.get-color-from-palette($primary);\n  $outline-color-accent: theming.get-color-from-palette($accent);\n  $outline-color-warn: theming.get-color-from-palette($warn);\n  $outline-color-disabled:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 0.15, 0.06));\n\n  .mat-form-field-appearance-outline {\n    .mat-form-field-outline {\n      color: $outline-color;\n    }\n\n    .mat-form-field-outline-thick {\n      color: $outline-color-hover;\n    }\n\n    &.mat-focused {\n      .mat-form-field-outline-thick {\n        color: $outline-color-primary;\n      }\n\n      &.mat-accent .mat-form-field-outline-thick {\n        color: $outline-color-accent;\n      }\n\n      &.mat-warn .mat-form-field-outline-thick {\n        color: $outline-color-warn;\n      }\n    }\n\n    // Class repeated so that rule is specific enough to override focused accent color case.\n    &.mat-form-field-invalid.mat-form-field-invalid {\n      .mat-form-field-outline-thick {\n        color: $outline-color-warn;\n      }\n    }\n\n    &.mat-form-field-disabled {\n      .mat-form-field-label {\n        color: $label-disabled-color;\n      }\n\n      .mat-form-field-outline {\n        color: $outline-color-disabled;\n      }\n    }\n  }\n}\n\n// Used to make instances of the _mat-form-field-label-floating mixin negligibly different,\n// and prevent Google's CSS Optimizer from collapsing the declarations. This is needed because some\n// of the selectors contain pseudo-classes not recognized in all browsers. If a browser encounters\n// an unknown pseudo-class it will discard the entire rule set.\n$outline-dedupe: 0;\n\n// Applies a floating label above the form field control itself.\n@mixin _label-floating($font-scale, $infix-padding, $infix-margin-top) {\n  transform: translateY(-$infix-margin-top - $infix-padding + $outline-dedupe)\n  scale($font-scale);\n  width: private.private-div(100%, $font-scale) + $outline-dedupe;\n\n  $outline-dedupe: $outline-dedupe + 0.00001 !global;\n}\n\n@mixin outline-typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  // The unit-less line-height from the font config.\n  $line-height: typography-utils.line-height($config, input);\n  // The amount to scale the font for the floating label and subscript.\n  $subscript-font-scale: 0.75;\n  // The padding above and below the infix.\n  $infix-padding: 1em;\n  // The margin applied to the form-field-infix to reserve space for the floating label.\n  $infix-margin-top:\n      $subscript-font-scale * typography-utils.private-coerce-unitless-to-em($line-height);\n  // The space between the bottom of the .mat-form-field-flex area and the subscript wrapper.\n  // Mocks show half of the text size, but this margin is applied to an element with the subscript\n  // text font size, so we need to divide by the scale factor to make it half of the original text\n  // size.\n  $subscript-margin-top: private.private-div(0.5em, $subscript-font-scale);\n  // The padding applied to the form-field-wrapper to reserve space for the subscript, since it's\n  // absolutely positioned. This is a combination of the subscript's margin and line-height, but we\n  // need to multiply by the subscript font scale factor since the wrapper has a larger font size.\n  $wrapper-padding-bottom: ($subscript-margin-top + $line-height) * $subscript-font-scale;\n  // The amount we offset the label from the input text in the outline appearance.\n  $outline-appearance-label-offset: -0.25em;\n\n  .mat-form-field-appearance-outline {\n    .mat-form-field-infix {\n      padding: $infix-padding 0 $infix-padding 0;\n    }\n\n    .mat-form-field-label {\n      top: $infix-margin-top + $infix-padding;\n      margin-top: $outline-appearance-label-offset;\n    }\n\n    &.mat-form-field-can-float {\n      &.mat-form-field-should-float .mat-form-field-label,\n      .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding + $outline-appearance-label-offset,\n                $infix-margin-top);\n      }\n\n      // Server-side rendered matInput with a label attribute but label not shown\n      // (used as a pure CSS stand-in for mat-form-field-should-float).\n      .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n      .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding + $outline-appearance-label-offset,\n                $infix-margin-top);\n      }\n    }\n  }\n}\n\n@mixin private-form-field-outline-density($config-or-theme) {}\n\n@mixin outline-theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-form-field-outline') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include outline-color($color);\n    }\n    @if $density != null {\n      @include private-form-field-outline-density($density);\n    }\n    @if $typography != null {\n      @include outline-typography($typography);\n    }\n  }\n}\n\n","@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/style/list-common';\n\n\n// Include this empty mixin for consistency with the other components.\n@mixin color($config-or-theme) {}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-grid-tile-header,\n  .mat-grid-tile-footer {\n    @include list-common.base(typography-utils.font-size($config, caption));\n    font-size: typography-utils.font-size($config, body-1);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-grid-list') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","// This mixin will ensure that lines that overflow the container will hide the overflow and\n// truncate neatly with an ellipsis.\n@mixin truncate-line() {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n// Mixin to provide all mat-line styles, changing secondary font size based on whether the list\n// is in dense mode.\n@mixin base($secondary-font-size) {\n  .mat-line {\n    @include truncate-line();\n    display: block;\n    box-sizing: border-box;\n\n    // all lines but the top line should have smaller text\n    &:nth-child(n+2) {\n      font-size: $secondary-font-size;\n    }\n  }\n}\n\n// This mixin normalizes default element styles, e.g. font weight for heading text.\n@mixin normalize-text() {\n  & > * {\n    margin: 0;\n    padding: 0;\n    font-weight: normal;\n    font-size: inherit;\n  }\n}\n\n// This mixin provides base styles for the wrapper around mat-line elements in a list.\n@mixin wrapper-base() {\n  @include normalize-text();\n\n  display: flex;\n  flex-direction: column;\n  flex: auto;\n  box-sizing: border-box;\n  overflow: hidden;\n\n  // Must remove wrapper when lines are empty or it takes up horizontal\n  // space and pushes other elements to the right.\n  &:empty {\n    display: none;\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/palette';\n@use '../core/theming/theming';\n@use '../core/style/private';\n@use '../core/style/form-common';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/style/vendor-prefixes';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $foreground: map.get($config, foreground);\n\n  .mat-form-field-type-mat-native-select .mat-form-field-infix::after {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-input-element:disabled,\n  .mat-form-field-type-mat-native-select.mat-form-field-disabled .mat-form-field-infix::after {\n    color: theming.get-color-from-palette($foreground, disabled-text);\n  }\n\n  .mat-input-element {\n    caret-color: theming.get-color-from-palette($primary, text);\n\n    @include vendor-prefixes.input-placeholder {\n      color: form-common.private-control-placeholder-color($config);\n    }\n\n    // On dark themes we set the native `select` color to some shade of white,\n    // however the color propagates to all of the `option` elements, which are\n    // always on a white background inside the dropdown, causing them to blend in.\n    // Since we can't change background of the dropdown, we need to explicitly\n    // reset the color of the options to something dark.\n    @if (map.get($config, is-dark)) {\n      &:not(.mat-native-select-inline) {\n        option {\n          color: palette.$dark-primary-text;\n        }\n\n        option:disabled {\n          color: palette.$dark-disabled-text;\n        }\n      }\n    }\n  }\n\n  .mat-form-field.mat-accent .mat-input-element {\n    caret-color: theming.get-color-from-palette($accent, text);\n  }\n\n  .mat-form-field.mat-warn .mat-input-element,\n  .mat-form-field-invalid .mat-input-element {\n    caret-color: theming.get-color-from-palette($warn, text);\n  }\n\n  .mat-form-field-type-mat-native-select.mat-form-field-invalid .mat-form-field-infix::after {\n    color: theming.get-color-from-palette($warn, text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  // The unit-less line-height from the font config.\n  $line-height: typography-utils.line-height($config, input);\n\n  // The amount of space between the top of the line and the top of the actual text\n  // (as a fraction of the font-size).\n  $line-spacing: private.private-div($line-height - 1, 2);\n\n  // <input> elements seem to have their height set slightly too large on Safari causing the text to\n  // be misaligned w.r.t. the placeholder. Adding this margin corrects it.\n  input.mat-input-element {\n    margin-top: typography-utils.private-coerce-unitless-to-em(-$line-spacing);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-input') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/style/private';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-menu-panel {\n    @include private.private-theme-overridable-elevation(4, $config);\n    background: theming.get-color-from-palette($background, 'card');\n  }\n\n  .mat-menu-item {\n    background: transparent;\n    color: theming.get-color-from-palette($foreground, 'text');\n\n    &[disabled] {\n      &,\n      .mat-menu-submenu-icon,\n      .mat-icon-no-color {\n        color: theming.get-color-from-palette($foreground, 'disabled');\n      }\n    }\n  }\n\n  .mat-menu-item .mat-icon-no-color,\n  .mat-menu-submenu-icon {\n    color: theming.get-color-from-palette($foreground, 'icon');\n  }\n\n  .mat-menu-item:hover,\n  .mat-menu-item.cdk-program-focused,\n  .mat-menu-item.cdk-keyboard-focused,\n  .mat-menu-item-highlighted {\n    &:not([disabled]) {\n      background: theming.get-color-from-palette($background, 'hover');\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-menu-item {\n    font: {\n      family: typography-utils.font-family($config, body-1);\n      size: typography-utils.font-size($config, body-1);\n      weight: typography-utils.font-weight($config, body-1);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-menu') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/density/private/compatibility';\n@use './paginator-variables';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n\n  .mat-paginator {\n    background: theming.get-color-from-palette($background, 'card');\n  }\n\n  .mat-paginator,\n  .mat-paginator-page-size .mat-select-trigger {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-paginator-decrement,\n  .mat-paginator-increment {\n    border-top: 2px solid theming.get-color-from-palette($foreground, 'icon');\n    border-right: 2px solid theming.get-color-from-palette($foreground, 'icon');\n  }\n\n  .mat-paginator-first,\n  .mat-paginator-last {\n    border-top: 2px solid theming.get-color-from-palette($foreground, 'icon');\n  }\n\n  .mat-icon-button[disabled] {\n    .mat-paginator-decrement,\n    .mat-paginator-increment,\n    .mat-paginator-first,\n    .mat-paginator-last {\n      border-color: theming.get-color-from-palette($foreground, 'disabled');\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-paginator,\n  .mat-paginator-page-size .mat-select-trigger {\n    font: {\n      family: typography-utils.font-family($config, caption);\n      size: typography-utils.font-size($config, caption);\n    }\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $height: compatibility.private-density-prop-value(paginator-variables.$density-config,\n    $density-scale, height);\n\n  @include compatibility.private-density-legacy-compatibility() {\n    .mat-paginator-container {\n      min-height: $height;\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-paginator') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n@mixin _color($palette) {\n  &.mat-radio-checked .mat-radio-outer-circle {\n    border-color: theming.get-color-from-palette($palette);\n  }\n\n  .mat-radio-inner-circle,\n  .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple),\n  &.mat-radio-checked .mat-radio-persistent-ripple,\n  &:active .mat-radio-persistent-ripple {\n    background-color: theming.get-color-from-palette($palette);\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-radio-outer-circle {\n    border-color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-radio-button {\n    &.mat-primary {\n      @include _color($primary);\n    }\n\n    &.mat-accent {\n      @include _color($accent);\n    }\n\n    &.mat-warn {\n      @include _color($warn);\n    }\n\n    // This needs extra specificity, because the classes above are combined\n    // (e.g. `.mat-radio-button.mat-accent`) which increases their specificity a lot.\n    // TODO: consider making the selectors into descendants (`.mat-primary .mat-radio-button`).\n    &.mat-radio-disabled {\n      &.mat-radio-checked .mat-radio-outer-circle,\n      .mat-radio-outer-circle {\n        border-color: theming.get-color-from-palette($foreground, disabled);\n      }\n\n      .mat-radio-ripple .mat-ripple-element,\n      .mat-radio-inner-circle {\n        background-color: theming.get-color-from-palette($foreground, disabled);\n      }\n\n      .mat-radio-label-content {\n        color: theming.get-color-from-palette($foreground, disabled);\n      }\n    }\n\n    // Switch this to a solid color since we're using `opacity`\n    // to control how opaque the ripple should be.\n    .mat-ripple-element {\n      background-color: map.get($foreground, base);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-radio-button {\n    font-family: typography-utils.font-family($config);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-radio') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/style/private';\n@use '../core/style/form-common';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n\n  .mat-select-value {\n    color: theming.get-color-from-palette($foreground, text);\n  }\n\n  .mat-select-placeholder {\n    color: form-common.private-control-placeholder-color($config);\n  }\n\n  .mat-select-disabled .mat-select-value {\n    color: theming.get-color-from-palette($foreground, disabled-text);\n  }\n\n  .mat-select-arrow {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-select-panel {\n    background: theming.get-color-from-palette($background, card);\n    @include private.private-theme-overridable-elevation(4, $config);\n\n    .mat-option.mat-selected:not(.mat-option-multiple) {\n      background: theming.get-color-from-palette($background, hover, 0.12);\n    }\n  }\n\n  .mat-form-field {\n    &.mat-focused {\n      &.mat-primary .mat-select-arrow {\n        color: theming.get-color-from-palette($primary, text);\n      }\n\n      &.mat-accent .mat-select-arrow {\n        color: theming.get-color-from-palette($accent, text);\n      }\n\n      &.mat-warn .mat-select-arrow {\n        color: theming.get-color-from-palette($warn, text);\n      }\n    }\n\n    .mat-select.mat-select-invalid .mat-select-arrow {\n      color: theming.get-color-from-palette($warn, text);\n    }\n\n    .mat-select.mat-select-disabled .mat-select-arrow {\n      color: theming.get-color-from-palette($foreground, disabled-text);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  // The unit-less line-height from the font config.\n  $line-height: typography-utils.line-height($config, input);\n\n  .mat-select {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-select-trigger {\n    height: typography-utils.private-coerce-unitless-to-em($line-height);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-select') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/style/private';\n@use '../core/theming/palette';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n@mixin _checked-color($palette, $thumb-checked-hue) {\n  &.mat-checked {\n    .mat-slide-toggle-thumb {\n      background-color: theming.get-color-from-palette($palette, $thumb-checked-hue);\n    }\n\n    .mat-slide-toggle-bar {\n      // Opacity is determined from the specs for the selection controls.\n      // See: https://material.io/design/components/selection-controls.html#specs\n      background-color: theming.get-color-from-palette($palette, $thumb-checked-hue, 0.54);\n    }\n\n    .mat-ripple-element {\n      // Set no opacity for the ripples because the ripple opacity will be adjusted dynamically\n      // based on the type of interaction with the slide-toggle (e.g. for hover, focus)\n      background-color: theming.get-color-from-palette($palette, $thumb-checked-hue);\n    }\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $is-dark: map.get($config, is-dark);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  // Color hues are based on the specs which briefly show the hues that are applied to a switch.\n  // The 2018 specs no longer describe how dark switches should look like. Due to the lack of\n  // information for dark themed switches, we partially keep the old behavior that is based on\n  // the previous specifications. For the checked color we always use the `default` hue because\n  // that follows MDC and also makes it easier for people to create a custom theme without needing\n  // to specify each hue individually.\n  $thumb-unchecked-hue: if($is-dark, 400, 50);\n  $thumb-checked-hue: default;\n\n  $bar-unchecked-color: theming.get-color-from-palette($foreground, disabled);\n  $ripple-unchecked-color: theming.get-color-from-palette($foreground, base);\n\n  .mat-slide-toggle {\n    @include _checked-color($accent, $thumb-checked-hue);\n\n    &.mat-primary {\n      @include _checked-color($primary, $thumb-checked-hue);\n    }\n\n    &.mat-warn {\n      @include _checked-color($warn, $thumb-checked-hue);\n    }\n\n    &:not(.mat-checked) .mat-ripple-element {\n      // Set no opacity for the ripples because the ripple opacity will be adjusted dynamically\n      // based on the type of interaction with the slide-toggle (e.g. for hover, focus)\n      background-color: $ripple-unchecked-color;\n    }\n  }\n\n  .mat-slide-toggle-thumb {\n    @include private.private-theme-elevation(1, $config);\n    background-color: theming.get-color-from-palette(palette.$grey-palette, $thumb-unchecked-hue);\n  }\n\n  .mat-slide-toggle-bar {\n    background-color: $bar-unchecked-color;\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-slide-toggle-content {\n    font-family: typography-utils.font-family($config);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-slide-toggle') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n","@use 'sass:map';\n@use 'sass:meta';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n@mixin _inner-content-theme($palette) {\n  .mat-slider-track-fill,\n  .mat-slider-thumb,\n  .mat-slider-thumb-label {\n    background-color: theming.get-color-from-palette($palette);\n  }\n\n  .mat-slider-thumb-label-text {\n    color: theming.get-color-from-palette($palette, default-contrast);\n  }\n\n  .mat-slider-focus-ring {\n    $opacity: 0.2;\n    $color: theming.get-color-from-palette($palette, default, $opacity);\n    background-color: $color;\n\n    // `mat-color` uses `rgba` for the opacity which won't work with\n    // CSS variables so we need to use `opacity` as a fallback.\n    @if (meta.type-of($color) != color) {\n      opacity: $opacity;\n    }\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  $mat-slider-off-color: theming.get-color-from-palette($foreground, slider-off);\n  $mat-slider-off-focused-color: theming.get-color-from-palette($foreground, slider-off-active);\n  $mat-slider-disabled-color: theming.get-color-from-palette($foreground, slider-off);\n  $mat-slider-labeled-min-value-thumb-color:\n    theming.get-color-from-palette($foreground, slider-min);\n  $mat-slider-labeled-min-value-thumb-label-color:\n    theming.get-color-from-palette($foreground, slider-off);\n  $mat-slider-tick-opacity: 0.7;\n  $mat-slider-tick-color:\n    theming.get-color-from-palette($foreground, base, $mat-slider-tick-opacity);\n  $mat-slider-tick-size: 2px;\n\n  .mat-slider-track-background {\n    background-color: $mat-slider-off-color;\n  }\n\n  .mat-primary {\n    @include _inner-content-theme($primary);\n  }\n\n  .mat-accent {\n    @include _inner-content-theme($accent);\n  }\n\n  .mat-warn {\n    @include _inner-content-theme($warn);\n  }\n\n  .mat-slider:hover,\n  .mat-slider.cdk-focused {\n    .mat-slider-track-background {\n      background-color: $mat-slider-off-focused-color;\n    }\n  }\n\n  .mat-slider-disabled {\n    .mat-slider-track-background,\n    .mat-slider-track-fill,\n    .mat-slider-thumb {\n      background-color: $mat-slider-disabled-color;\n    }\n\n    &:hover {\n      .mat-slider-track-background {\n        background-color: $mat-slider-disabled-color;\n      }\n    }\n  }\n\n  .mat-slider-min-value {\n    .mat-slider-focus-ring {\n      $opacity: 0.12;\n      $color: theming.get-color-from-palette($foreground, base, $opacity);\n      background-color: $color;\n\n      // `mat-color` uses `rgba` for the opacity which won't work with\n      // CSS variables so we need to use `opacity` as a fallback.\n      @if (meta.type-of($color) != color) {\n        opacity: $opacity;\n      }\n    }\n\n    &.mat-slider-thumb-label-showing {\n      .mat-slider-thumb,\n      .mat-slider-thumb-label {\n        background-color: $mat-slider-labeled-min-value-thumb-color;\n      }\n\n      &.cdk-focused {\n        .mat-slider-thumb,\n        .mat-slider-thumb-label {\n          background-color: $mat-slider-labeled-min-value-thumb-label-color;\n        }\n      }\n    }\n\n    &:not(.mat-slider-thumb-label-showing) {\n      .mat-slider-thumb {\n        border-color: $mat-slider-off-color;\n        background-color: transparent;\n      }\n\n      &:hover,\n      &.cdk-focused {\n        .mat-slider-thumb {\n          border-color: $mat-slider-off-focused-color;\n        }\n\n        &.mat-slider-disabled .mat-slider-thumb {\n          border-color: $mat-slider-disabled-color;\n        }\n      }\n    }\n  }\n\n  .mat-slider-has-ticks .mat-slider-wrapper::after {\n    border-color: $mat-slider-tick-color;\n\n    // `mat-color` uses `rgba` for the opacity which won't work with\n    // CSS variables so we need to use `opacity` as a fallback.\n    @if (meta.type-of($mat-slider-tick-color) != color) {\n      opacity: $mat-slider-tick-opacity;\n    }\n  }\n\n  .mat-slider-horizontal .mat-slider-ticks {\n    background-image: repeating-linear-gradient(to right, $mat-slider-tick-color,\n        $mat-slider-tick-color $mat-slider-tick-size, transparent 0, transparent);\n    // Firefox doesn't draw the gradient correctly with 'to right'\n    // (see https://bugzilla.mozilla.org/show_bug.cgi?id=1314319).\n    background-image: -moz-repeating-linear-gradient(0.0001deg, $mat-slider-tick-color,\n        $mat-slider-tick-color $mat-slider-tick-size, transparent 0, transparent);\n\n    // `mat-color` uses `rgba` for the opacity which won't work with\n    // CSS variables so we need to use `opacity` as a fallback.\n    @if (meta.type-of($mat-slider-tick-color) != color) {\n      opacity: $mat-slider-tick-opacity;\n    }\n  }\n\n  .mat-slider-vertical .mat-slider-ticks {\n    background-image: repeating-linear-gradient(to bottom, $mat-slider-tick-color,\n        $mat-slider-tick-color $mat-slider-tick-size, transparent 0, transparent);\n\n    // `mat-color` uses `rgba` for the opacity which won't work with\n    // CSS variables so we need to use `opacity` as a fallback.\n    @if (meta.type-of($mat-slider-tick-color) != color) {\n      opacity: $mat-slider-tick-opacity;\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-slider-thumb-label-text {\n    font: {\n      family: typography-utils.font-family($config);\n      size: typography-utils.font-size($config, caption);\n      weight: typography-utils.font-weight($config, body-2);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-slider') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/density/private/compatibility';\n@use '../core/style/private';\n@use './stepper-variables';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n\n  .mat-step-header {\n    &.cdk-keyboard-focused,\n    &.cdk-program-focused,\n    &:hover:not([aria-disabled]),\n    &:hover[aria-disabled='false'] {\n      background-color: theming.get-color-from-palette($background, hover);\n    }\n\n    &:hover[aria-disabled='true'] {\n      cursor: default;\n    }\n\n    // On touch devices the :hover state will linger on the element after a tap.\n    // Reset it via `@media` after the declaration, because the media query isn't\n    // supported by all browsers yet.\n    @media (hover: none) {\n      &:hover {\n        background: none;\n      }\n    }\n\n    .mat-step-label,\n    .mat-step-optional {\n      // TODO(josephperrott): Update to using a corrected disabled-text contrast\n      // instead of secondary-text.\n      color: theming.get-color-from-palette($foreground, secondary-text);\n    }\n\n    .mat-step-icon {\n      // TODO(josephperrott): Update to using a corrected disabled-text contrast\n      // instead of secondary-text.\n      background-color: theming.get-color-from-palette($foreground, secondary-text);\n      color: theming.get-color-from-palette($primary, default-contrast);\n    }\n\n    .mat-step-icon-selected,\n    .mat-step-icon-state-done,\n    .mat-step-icon-state-edit {\n      background-color: theming.get-color-from-palette($primary);\n      color: theming.get-color-from-palette($primary, default-contrast);\n    }\n\n    &.mat-accent {\n      .mat-step-icon {\n        color: theming.get-color-from-palette($accent, default-contrast);\n      }\n\n      .mat-step-icon-selected,\n      .mat-step-icon-state-done,\n      .mat-step-icon-state-edit {\n        background-color: theming.get-color-from-palette($accent);\n        color: theming.get-color-from-palette($accent, default-contrast);\n      }\n    }\n\n    &.mat-warn {\n      .mat-step-icon {\n        color: theming.get-color-from-palette($warn, default-contrast);\n      }\n\n      .mat-step-icon-selected,\n      .mat-step-icon-state-done,\n      .mat-step-icon-state-edit {\n        background-color: theming.get-color-from-palette($warn);\n        color: theming.get-color-from-palette($warn, default-contrast);\n      }\n    }\n\n    .mat-step-icon-state-error {\n      background-color: transparent;\n      color: theming.get-color-from-palette($warn, text);\n    }\n\n    .mat-step-label.mat-step-label-active {\n      color: theming.get-color-from-palette($foreground, text);\n    }\n\n    .mat-step-label.mat-step-label-error {\n      color: theming.get-color-from-palette($warn, text);\n    }\n  }\n\n  .mat-stepper-horizontal, .mat-stepper-vertical {\n    background-color: theming.get-color-from-palette($background, card);\n  }\n\n  .mat-stepper-vertical-line::before {\n    border-left-color: theming.get-color-from-palette($foreground, divider);\n  }\n\n  .mat-horizontal-stepper-header::before,\n  .mat-horizontal-stepper-header::after,\n  .mat-stepper-horizontal-line {\n    border-top-color: theming.get-color-from-palette($foreground, divider);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-stepper-vertical, .mat-stepper-horizontal {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-step-label {\n    font: {\n      size: typography-utils.font-size($config, body-1);\n      weight: typography-utils.font-weight($config, body-1);\n    };\n  }\n\n  .mat-step-sub-label-error {\n    font-weight: normal;\n  }\n\n  .mat-step-label-error {\n    font-size: typography-utils.font-size($config, body-2);\n  }\n\n  .mat-step-label-selected {\n    font: {\n      size: typography-utils.font-size($config, body-2);\n      weight: typography-utils.font-weight($config, body-2);\n    };\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $height: compatibility.private-density-prop-value(stepper-variables.$density-config,\n    $density-scale, height);\n  $vertical-padding: private.private-div($height - stepper-variables.$label-header-height, 2);\n\n  @include compatibility.private-density-legacy-compatibility() {\n    .mat-horizontal-stepper-header {\n      height: $height;\n    }\n\n    .mat-stepper-label-position-bottom .mat-horizontal-stepper-header,\n    .mat-vertical-stepper-header {\n      padding: $vertical-padding stepper-variables.$side-gap;\n    }\n\n    // Ensures that the vertical lines for the step content exceed into the step\n    // headers with a given distance (`$mat-stepper-line-gap`) to the step icon.\n    .mat-stepper-vertical-line::before {\n      top: stepper-variables.$line-gap - $vertical-padding;\n      bottom: stepper-variables.$line-gap - $vertical-padding;\n    }\n\n    // Ensures that the horizontal lines for the step header are centered vertically.\n    .mat-stepper-label-position-bottom .mat-horizontal-stepper-header {\n      &::after, &::before {\n        top: $vertical-padding + private.private-div(stepper-variables.$label-header-height, 2);\n      }\n    }\n\n    // Ensures that the horizontal line for the step content is aligned centered vertically.\n    .mat-stepper-label-position-bottom .mat-stepper-horizontal-line {\n      top: $vertical-padding + private.private-div(stepper-variables.$label-header-height, 2);\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-stepper') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n  $header-border: 1px solid theming.get-color-from-palette($foreground, divider);\n\n  .mat-tab-nav-bar,\n  .mat-tab-header {\n    border-bottom: $header-border;\n  }\n\n  .mat-tab-group-inverted-header {\n    .mat-tab-nav-bar,\n    .mat-tab-header {\n      border-top: $header-border;\n      border-bottom: none;\n    }\n  }\n\n  .mat-tab-label, .mat-tab-link {\n    color: theming.get-color-from-palette($foreground, text);\n\n    &.mat-tab-disabled {\n      color: theming.get-color-from-palette($foreground, disabled-text);\n    }\n  }\n\n  .mat-tab-header-pagination-chevron {\n    border-color: theming.get-color-from-palette($foreground, text);\n  }\n\n  .mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron {\n    border-color: theming.get-color-from-palette($foreground, disabled-text);\n  }\n\n  // Remove header border when there is a background color\n  .mat-tab-group[class*='mat-background-'] > .mat-tab-header,\n  .mat-tab-nav-bar[class*='mat-background-'] {\n    border-bottom: none;\n    border-top: none;\n  }\n\n  .mat-tab-group, .mat-tab-nav-bar {\n    $theme-colors: (\n      primary: $primary,\n      accent: $accent,\n      warn: $warn\n    );\n\n    @each $name, $color in $theme-colors {\n      // Set the foreground color of the tabs\n      &.mat-#{$name} {\n        @include _label-focus-color($color);\n        @include _ink-bar-color($color);\n\n        // Override ink bar when background color is the same\n        &.mat-background-#{$name} {\n          > .mat-tab-header, > .mat-tab-link-container {\n            @include _ink-bar-color($color, default-contrast);\n          }\n        }\n      }\n    }\n\n    @each $name, $color in $theme-colors {\n      // Set background color of the tabs and override focus color\n      &.mat-background-#{$name} {\n        @include _label-focus-color($color);\n        @include _tabs-background($color);\n      }\n    }\n  }\n}\n\n@mixin _ink-bar-color($color, $hue: default) {\n  .mat-ink-bar {\n    background-color: theming.get-color-from-palette($color, $hue);\n  }\n}\n\n@mixin _label-focus-color($tab-focus-color) {\n  .mat-tab-label,\n  .mat-tab-link {\n    &.cdk-keyboard-focused,\n    &.cdk-program-focused {\n      &:not(.mat-tab-disabled) {\n        background-color: theming.get-color-from-palette($tab-focus-color, lighter, 0.3);\n      }\n    }\n  }\n}\n\n@mixin _tabs-background($background-color) {\n  // Note that these selectors target direct descendants so\n  // that the styles don't apply to any nested tab groups.\n\n  // Set background color for the tab group\n  > .mat-tab-header, > .mat-tab-link-container, > .mat-tab-header-pagination {\n    background-color: theming.get-color-from-palette($background-color);\n  }\n\n  // Set labels to contrast against background\n  > .mat-tab-header .mat-tab-label, > .mat-tab-link-container .mat-tab-link {\n    color: theming.get-color-from-palette($background-color, default-contrast);\n\n    &.mat-tab-disabled {\n      color: theming.get-color-from-palette($background-color, default-contrast, 0.4);\n    }\n  }\n\n  // Set pagination chevrons to contrast background\n  > .mat-tab-header .mat-tab-header-pagination-chevron,\n  > .mat-tab-header-pagination .mat-tab-header-pagination-chevron,\n  > .mat-tab-link-container .mat-focus-indicator::before,\n  > .mat-tab-header .mat-focus-indicator::before {\n    border-color: theming.get-color-from-palette($background-color, default-contrast);\n  }\n\n  > .mat-tab-header .mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron,\n  > .mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron {\n    // Set the color opacity via `opacity`, rather than `rgba`, because it may be a CSS variable.\n    border-color: theming.get-color-from-palette($background-color, default-contrast, 1);\n    opacity: 0.4;\n  }\n\n  // Set ripples color to be the contrast color of the new background. Otherwise the ripple\n  // color will be based on the app background color.\n  > .mat-tab-header .mat-ripple-element,\n  > .mat-tab-link-container .mat-ripple-element,\n  > .mat-tab-header-pagination .mat-ripple-element {\n    // Set the color opacity via `opacity`, rather than `rgba`, because it may be a CSS variable.\n    background-color: theming.get-color-from-palette($background-color, default-contrast, 1);\n    opacity: 0.12;\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-tab-group {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-tab-label, .mat-tab-link {\n    font: {\n      family: typography-utils.font-family($config, button);\n      size: typography-utils.font-size($config, button);\n      weight: typography-utils.font-weight($config, button);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-tabs') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/density/private/compatibility';\n@use '../core/style/variables';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use './toolbar-variables';\n\n@mixin _height($height) {\n  .mat-toolbar-multiple-rows {\n    min-height: $height;\n  }\n  .mat-toolbar-row, .mat-toolbar-single-row {\n    height: $height;\n  }\n}\n\n@mixin _palette-styles($palette) {\n  background: theming.get-color-from-palette($palette);\n  color: theming.get-color-from-palette($palette, default-contrast);\n}\n\n@mixin _form-field-overrides {\n  .mat-form-field-underline,\n  .mat-form-field-ripple,\n  .mat-focused .mat-form-field-ripple {\n    background-color: currentColor;\n  }\n\n  .mat-form-field-label,\n  .mat-focused .mat-form-field-label,\n  .mat-select-value,\n  .mat-select-arrow,\n  .mat-form-field.mat-focused .mat-select-arrow {\n    color: inherit;\n  }\n\n  .mat-input-element {\n    caret-color: currentColor;\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-toolbar {\n    background: theming.get-color-from-palette($background, app-bar);\n    color: theming.get-color-from-palette($foreground, text);\n\n    &.mat-primary {\n      @include _palette-styles($primary);\n    }\n\n    &.mat-accent {\n      @include _palette-styles($accent);\n    }\n\n    &.mat-warn {\n      @include _palette-styles($warn);\n    }\n\n    @include _form-field-overrides;\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-toolbar,\n  .mat-toolbar h1,\n  .mat-toolbar h2,\n  .mat-toolbar h3,\n  .mat-toolbar h4,\n  .mat-toolbar h5,\n  .mat-toolbar h6 {\n    @include typography-utils.typography-level($config, title);\n    margin: 0;\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $height-desktop: compatibility.private-density-prop-value(\n      toolbar-variables.$desktop-density-config, $density-scale, height);\n  $height-mobile: compatibility.private-density-prop-value(\n      toolbar-variables.$mobile-density-config, $density-scale, height);\n\n  @include compatibility.private-density-legacy-compatibility() {\n    // Set the default height for the toolbar.\n    @include _height($height-desktop);\n\n    // As per specs, toolbars should have a different height in mobile devices. This has been\n    // specified in the old guidelines and is still observable in the new specifications by\n    // looking at the spec images. See: https://material.io/design/components/app-bars-top.html#anatomy\n    @media (variables.$xsmall) {\n      @include _height($height-mobile);\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-toolbar') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/style/private';\n\n$target-height: 22px;\n$font-size: 10px;\n$vertical-padding: private.private-div($target-height - $font-size, 2);\n\n$handset-target-height: 30px;\n$handset-font-size: 14px;\n$handset-vertical-padding:\n    private.private-div($handset-target-height - $handset-font-size, 2);\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n\n  .mat-tooltip {\n    background: theming.get-color-from-palette($background, tooltip, 0.9);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-tooltip {\n    font-family: typography-utils.font-family($config);\n    font-size: $font-size;\n    padding-top: $vertical-padding;\n    padding-bottom: $vertical-padding;\n  }\n\n  .mat-tooltip-handset {\n    font-size: $handset-font-size;\n    padding-top: $handset-vertical-padding;\n    padding-bottom: $handset-vertical-padding;\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-tooltip') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/style/list-common';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-list-base {\n    .mat-list-item {\n      color: theming.get-color-from-palette($foreground, text);\n    }\n\n    .mat-list-option {\n      color: theming.get-color-from-palette($foreground, text);\n    }\n\n    .mat-subheader {\n      color: theming.get-color-from-palette($foreground, secondary-text);\n    }\n  }\n\n  .mat-list-item-disabled {\n    background-color: theming.get-color-from-palette($background, disabled-list-option);\n  }\n\n  .mat-list-option,\n  .mat-nav-list .mat-list-item,\n  .mat-action-list .mat-list-item {\n    &:hover, &:focus {\n      background: theming.get-color-from-palette($background, 'hover');\n    }\n  }\n\n  .mat-list-single-selected-option {\n    &, &:hover, &:focus {\n      background: theming.get-color-from-palette($background, hover, 0.12);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  $font-family: typography-utils.font-family($config);\n\n  .mat-list-item {\n    font-family: $font-family;\n  }\n\n  .mat-list-option {\n    font-family: $font-family;\n  }\n\n  // Default list\n  .mat-list-base {\n    .mat-list-item {\n      font-size: typography-utils.font-size($config, subheading-2);\n      @include list-common.base(typography-utils.font-size($config, body-1));\n    }\n\n    .mat-list-option {\n      font-size: typography-utils.font-size($config, subheading-2);\n      @include list-common.base(typography-utils.font-size($config, body-1));\n    }\n\n    .mat-subheader {\n      font-family: typography-utils.font-family($config, body-2);\n      font-size: typography-utils.font-size($config, body-2);\n      font-weight: typography-utils.font-weight($config, body-2);\n    }\n  }\n\n  // Dense list\n  .mat-list-base[dense] {\n    .mat-list-item {\n      font-size: typography-utils.font-size($config, caption);\n      @include list-common.base(typography-utils.font-size($config, caption));\n    }\n\n    .mat-list-option {\n      font-size: typography-utils.font-size($config, caption);\n      @include list-common.base(typography-utils.font-size($config, caption));\n    }\n\n    .mat-subheader {\n      font-family: $font-family;\n      font-size: typography-utils.font-size($config, caption);\n      font-weight: typography-utils.font-weight($config, body-2);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-list') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../theming/theming';\n@use '../typography/typography';\n@use '../typography/typography-utils';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n\n  .mat-option {\n    color: theming.get-color-from-palette($foreground, text);\n\n    &:hover:not(.mat-option-disabled),\n    &:focus:not(.mat-option-disabled) {\n      background: theming.get-color-from-palette($background, hover);\n    }\n\n    // In multiple mode there is a checkbox to show that the option is selected.\n    &.mat-selected:not(.mat-option-multiple):not(.mat-option-disabled) {\n      background: theming.get-color-from-palette($background, hover);\n    }\n\n    &.mat-active {\n      background: theming.get-color-from-palette($background, hover);\n      color: theming.get-color-from-palette($foreground, text);\n    }\n\n    &.mat-option-disabled {\n      color: theming.get-color-from-palette($foreground, hint-text);\n    }\n  }\n\n  .mat-primary .mat-option.mat-selected:not(.mat-option-disabled) {\n    color: theming.get-color-from-palette($primary, text);\n  }\n\n  .mat-accent .mat-option.mat-selected:not(.mat-option-disabled) {\n    color: theming.get-color-from-palette($accent, text);\n  }\n\n  .mat-warn .mat-option.mat-selected:not(.mat-option-disabled) {\n    color: theming.get-color-from-palette($warn, text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-option {\n    font: {\n      family: typography-utils.font-family($config);\n      size: typography-utils.font-size($config, subheading-2);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-option') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../theming/theming';\n@use '../typography/typography';\n@use '../typography/typography-utils';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n\n  .mat-optgroup-label {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-optgroup-disabled .mat-optgroup-label {\n    color: theming.get-color-from-palette($foreground, hint-text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-optgroup-label {\n    @include typography-utils.typography-level($config, body-2);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-optgroup') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/theming/theming';\n@use '../core/theming/palette';\n@use '../core/style/private';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $is-dark-theme: map.get($config, is-dark);\n  $accent: map.get($config, accent);\n\n  .mat-snack-bar-container {\n    // Use the primary text on the dark theme, even though the lighter one uses\n    // a secondary, because the contrast on the light primary text is poor.\n    color: if($is-dark-theme, palette.$dark-primary-text, palette.$light-secondary-text);\n    background: if($is-dark-theme, map.get(palette.$grey-palette, 50), #323232);\n\n    @include private.private-theme-elevation(6, $config);\n  }\n\n  .mat-simple-snackbar-action {\n    color: if($is-dark-theme, inherit, theming.get-color-from-palette($accent, text));\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-simple-snackbar {\n    font: {\n      family: typography-utils.font-family($config, body-1);\n      size: typography-utils.font-size($config, body-1);\n    }\n  }\n\n  .mat-simple-snackbar-action {\n    line-height: 1;\n    font: {\n      family: inherit;\n      size: inherit;\n      weight: typography-utils.font-weight($config, button);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-snack-bar') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/density/private/compatibility';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use './tree-variables';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-tree {\n    background: theming.get-color-from-palette($background, 'card');\n  }\n\n  .mat-tree-node,\n  .mat-nested-tree-node {\n    color: theming.get-color-from-palette($foreground, text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-tree {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-tree-node,\n  .mat-nested-tree-node {\n    font-weight: typography-utils.font-weight($config, body-1);\n    font-size: typography-utils.font-size($config, body-1);\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $height: compatibility.private-density-prop-value(tree-variables.$density-config,\n    $density-scale, height);\n\n  @include compatibility.private-density-legacy-compatibility() {\n    .mat-tree-node {\n      min-height: $height;\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-tree') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n","@use '../../../cdk/a11y';\n\n@mixin ripple() {\n  // The host element of an mat-ripple directive should always have a position of \"absolute\" or\n  // \"relative\" so that the ripples inside are correctly positioned relatively to the container.\n  .mat-ripple {\n    overflow: hidden;\n\n    // By default, every ripple container should have position: relative in favor of creating an\n    // easy API for developers using the MatRipple directive.\n    position: relative;\n\n    // Promote containers that have ripples to a new layer. We want to target `:not(:empty)`,\n    // because we don't want all ripple containers to have their own layer since they're used in a\n    // lot of places and the layer is only relevant while animating. Note that ideally we'd use\n    // the `contain` property here (see #13175), because `:empty` can be broken by having extra\n    // text inside the element, but it isn't very well supported yet.\n    &:not(:empty) {\n      transform: translateZ(0);\n    }\n  }\n\n  .mat-ripple.mat-ripple-unbounded {\n    overflow: visible;\n  }\n\n  .mat-ripple-element {\n    position: absolute;\n    border-radius: 50%;\n    pointer-events: none;\n\n    transition: opacity, transform 0ms cubic-bezier(0, 0, 0.2, 1);\n    transform: scale(0);\n\n    // In high contrast mode the ripple is opaque, causing it to obstruct the content.\n    @include a11y.high-contrast(active, off) {\n      display: none;\n    }\n  }\n}\n","/// Emits a CSS class, `.cdk-visually-hidden`. This class can be applied to an element\n/// to make that element visually hidden while remaining available to assistive technology.\n@mixin a11y-visually-hidden() {\n  .cdk-visually-hidden {\n    border: 0;\n    clip: rect(0 0 0 0);\n    height: 1px;\n    margin: -1px;\n    overflow: hidden;\n    padding: 0;\n    position: absolute;\n    width: 1px;\n\n    // This works around a Chrome bug that can cause the tab to crash when large amounts of\n    // non-English text get wrapped: https://bugs.chromium.org/p/chromium/issues/detail?id=1201444\n    white-space: nowrap;\n\n    // Avoid browsers rendering the focus ring in some cases.\n    outline: 0;\n\n    // Avoid some cases where the browser will still render the native controls (see #9049).\n    -webkit-appearance: none;\n    -moz-appearance: none;\n  }\n}\n\n/// @deprecated Use `a11y-visually-hidden`.\n@mixin a11y() {\n  @include a11y-visually-hidden;\n}\n\n/// Emits the mixin's content nested under `$selector-context` if `$selector-context`\n/// is non-empty.\n/// @param {String} selector-context The selector under which to nest the mixin's content.\n@mixin _optionally-nest-content($selector-context) {\n  @if ($selector-context == '') {\n    @content;\n  }\n  @else {\n    #{$selector-context} {\n      @content;\n    }\n  }\n}\n\n/// Applies styles for users in high contrast mode. Note that this only applies\n/// to Microsoft browsers. Chrome can be included by checking for the `html[hc]`\n/// attribute, however Chrome handles high contrast differently.\n///\n/// @param {String} target Type of high contrast setting to target. Defaults to `active`, can be\n///     `white-on-black` or `black-on-white`.\n/// @param {String} encapsulation Whether to emit styles for view encapsulation. Values are:\n///     * `on` - works for `Emulated`, `Native`, and `ShadowDom`\n///     * `off` - works for `None`\n///     * `any` - works for all encapsulation modes by emitting the CSS twice (default).\n@mixin high-contrast($target: active, $encapsulation: 'any') {\n  @if ($target != 'active' and $target != 'black-on-white' and $target != 'white-on-black') {\n    @error 'Unknown cdk-high-contrast value \"#{$target}\" provided. ' +\n           'Allowed values are \"active\", \"black-on-white\", and \"white-on-black\"';\n  }\n\n  @if ($encapsulation != 'on' and $encapsulation != 'off' and $encapsulation != 'any') {\n    @error 'Unknown cdk-high-contrast encapsulation \"#{$encapsulation}\" provided. ' +\n           'Allowed values are \"on\", \"off\", and \"any\"';\n  }\n\n  // If the selector context has multiple parts, such as `.section, .region`, just doing\n  // `.cdk-high-contrast-xxx #{&}` will only apply the parent selector to the first part of the\n  // context. We address this by nesting the selector context under .cdk-high-contrast.\n  @at-root {\n    $selector-context: #{&};\n\n    @if ($encapsulation != 'on') {\n      // Note that if this selector is updated, the same change has to be made inside\n      // `_overlay.scss` which can't depend on this mixin due to some infrastructure limitations.\n      .cdk-high-contrast-#{$target} {\n        @include _optionally-nest-content($selector-context) {\n          @content;\n        }\n      }\n    }\n\n    @if ($encapsulation != 'off') {\n      .cdk-high-contrast-#{$target} :host {\n        @include _optionally-nest-content($selector-context) {\n          @content;\n        }\n      }\n    }\n  }\n}\n","// We want overlays to always appear over user content, so set a baseline\n// very high z-index for the overlay container, which is where we create the new\n// stacking context for all overlays.\n$overlay-container-z-index: 1000 !default;\n$overlay-z-index: 1000 !default;\n$overlay-backdrop-z-index: 1000 !default;\n\n// Background color for all of the backdrops\n$overlay-backdrop-color: rgba(0, 0, 0, 0.32) !default;\n\n// Default backdrop animation is based on the Material Design swift-ease-out.\n$backdrop-animation-duration: 400ms !default;\n$backdrop-animation-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1) !default;\n\n/// Emits structural styles required for cdk/overlay to function.\n@mixin overlay() {\n  .cdk-overlay-container, .cdk-global-overlay-wrapper {\n    // Disable events from being captured on the overlay container.\n    pointer-events: none;\n\n    // The container should be the size of the viewport.\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n  }\n\n  // The overlay-container is an invisible element which contains all individual overlays.\n  .cdk-overlay-container {\n    position: fixed;\n    z-index: $overlay-container-z-index;\n\n    &:empty {\n      // Hide the element when it doesn't have any child nodes. This doesn't\n      // include overlays that have been detached, rather than disposed.\n      display: none;\n    }\n  }\n\n  // We use an extra wrapper element in order to use make the overlay itself a flex item.\n  // This makes centering the overlay easy without running into the subpixel rendering\n  // problems tied to using `transform` and without interfering with the other position\n  // strategies.\n  .cdk-global-overlay-wrapper {\n    display: flex;\n    position: absolute;\n    z-index: $overlay-z-index;\n  }\n\n  // A single overlay pane.\n  .cdk-overlay-pane {\n    // Note: it's important for this one to start off `absolute`,\n    // in order for us to be able to measure it correctly.\n    position: absolute;\n    pointer-events: auto;\n    box-sizing: border-box;\n    z-index: $overlay-z-index;\n\n    // For connected-position overlays, we set `display: flex` in\n    // order to force `max-width` and `max-height` to take effect.\n    display: flex;\n    max-width: 100%;\n    max-height: 100%;\n  }\n\n  .cdk-overlay-backdrop {\n    // TODO(jelbourn): reuse sidenav fullscreen mixin.\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n\n    z-index: $overlay-backdrop-z-index;\n    pointer-events: auto;\n    -webkit-tap-highlight-color: transparent;\n    transition: opacity $backdrop-animation-duration $backdrop-animation-timing-function;\n    opacity: 0;\n\n    &.cdk-overlay-backdrop-showing {\n      opacity: 1;\n\n      // Note that we can't import and use the `high-contrast` mixin from `_a11y.scss`, because\n      // this file will be copied to the top-level `cdk` package when putting together the files\n      // for npm. Any relative import paths we use here will become invalid once the file is copied.\n      .cdk-high-contrast-active & {\n        // In high contrast mode the rgba background will become solid\n        // so we need to fall back to making it opaque using `opacity`.\n        opacity: 0.6;\n      }\n    }\n  }\n\n  .cdk-overlay-dark-backdrop {\n    background: $overlay-backdrop-color;\n  }\n\n  .cdk-overlay-transparent-backdrop {\n    // Note: as of Firefox 57, having the backdrop be `background: none` will prevent it from\n    // capturing the user's mouse scroll events. Since we also can't use something like\n    // `rgba(0, 0, 0, 0)`, we work around the inconsistency by not setting the background at\n    // all and using `opacity` to make the element transparent.\n    &, &.cdk-overlay-backdrop-showing {\n      opacity: 0;\n    }\n  }\n\n  // Overlay parent element used with the connected position strategy. Used to constrain the\n  // overlay element's size to fit within the viewport.\n  .cdk-overlay-connected-position-bounding-box {\n    position: absolute;\n    z-index: $overlay-z-index;\n\n    // We use `display: flex` on this element exclusively for centering connected overlays.\n    // When *not* centering, a top/left/bottom/right will be set which overrides the normal\n    // flex layout.\n    display: flex;\n\n    // We use the `column` direction here to avoid some flexbox issues in Edge\n    // when using the \"grow after open\" options.\n    flex-direction: column;\n\n    // Add some dimensions so the element has an `innerText` which some people depend on in tests.\n    min-width: 1px;\n    min-height: 1px;\n  }\n\n  // Used when disabling global scrolling.\n  .cdk-global-scrollblock {\n    position: fixed;\n\n    // Necessary for the content not to lose its width. Note that we're using 100%, instead of\n    // 100vw, because 100vw includes the width plus the scrollbar, whereas 100% is the width\n    // that the element had before we made it `fixed`.\n    width: 100%;\n\n    // Note: this will always add a scrollbar to whatever element it is on, which can\n    // potentially result in double scrollbars. It shouldn't be an issue, because we won't\n    // block scrolling on a page that doesn't have a scrollbar in the first place.\n    overflow-y: scroll;\n  }\n}\n","// Structural styles for the autosize text fields.\n@mixin text-field-autosize() {\n  // Remove the resize handle on autosizing textareas, because whatever height\n  // the user resized to will be overwritten once they start typing again.\n  textarea.cdk-textarea-autosize {\n    resize: none;\n  }\n\n  // This class is temporarily applied to the textarea when it is being measured. It is immediately\n  // removed when measuring is complete. We use `!important` rules here to make sure user-specified\n  // rules do not interfere with the measurement.\n  textarea.cdk-textarea-autosize-measuring {\n    @include _autosize-measuring-base;\n    height: auto !important;\n    overflow: hidden !important;\n  }\n\n  // Similar to the `cdk-textarea-autosize-measuring` class, but only applied on Firefox. We need\n  // to use this class, because Firefox has a bug where changing the `overflow` breaks the user's\n  // ability to undo/redo what they were typing (see #16629). This class is only scoped to Firefox,\n  // because the measurements there don't seem to be affected by the `height: 0`, whereas on other\n  // browsers they are, e.g. Chrome detects longer text and IE does't resize back to normal.\n  // Identical issue report: https://bugzilla.mozilla.org/show_bug.cgi?id=448784\n  textarea.cdk-textarea-autosize-measuring-firefox {\n    @include _autosize-measuring-base;\n    height: 0 !important;\n  }\n}\n\n// Core styles that enable monitoring autofill state of text fields.\n@mixin text-field-autofill() {\n  // Keyframes that apply no styles, but allow us to monitor when an text field becomes autofilled\n  // by watching for the animation events that are fired when they start. Note: the /*!*/ comment is\n  // needed to prevent LibSass from stripping the keyframes out.\n  // Based on: https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n  @keyframes cdk-text-field-autofill-start {/*!*/}\n  @keyframes cdk-text-field-autofill-end {/*!*/}\n\n  .cdk-text-field-autofill-monitored:-webkit-autofill {\n    // Since Chrome 80 we need a 1ms delay, or the animationstart event won't fire.\n    animation: cdk-text-field-autofill-start 0s 1ms;\n  }\n\n  .cdk-text-field-autofill-monitored:not(:-webkit-autofill) {\n    // Since Chrome 80 we need a 1ms delay, or the animationstart event won't fire.\n    animation: cdk-text-field-autofill-end 0s 1ms;\n  }\n}\n\n@mixin _autosize-measuring-base {\n  // Having 2px top and bottom padding seems to fix a bug where Chrome gets an incorrect\n  // measurement. We just have to account for it later and subtract it off the final result.\n  padding: 2px 0 !important;\n  box-sizing: content-box !important;\n}\n\n// Used to generate UIDs for keyframes used to change the text field autofill styles.\n$autofill-color-frame-count: 0;\n\n// Mixin used to apply custom background and foreground colors to an autofilled text field.\n// Based on: https://stackoverflow.com/questions/2781549/\n// removing-input-background-colour-for-chrome-autocomplete#answer-37432260\n@mixin text-field-autofill-color($background, $foreground:'') {\n  @keyframes cdk-text-field-autofill-color-#{$autofill-color-frame-count} {\n    to {\n      background: $background;\n      @if $foreground != '' { color: $foreground; }\n    }\n  }\n\n  &:-webkit-autofill {\n    animation: cdk-text-field-autofill-color-#{$autofill-color-frame-count} both;\n  }\n\n  &.cdk-text-field-autofill-monitored:-webkit-autofill {\n    // Since Chrome 80 we need a 1ms delay for cdk-text-field-autofill-start, or the animationstart\n    // event won't fire.\n    animation: cdk-text-field-autofill-start 0s 1ms,\n               cdk-text-field-autofill-color-#{$autofill-color-frame-count} both;\n  }\n\n  $autofill-color-frame-count: $autofill-color-frame-count + 1 !global;\n}\n\n// @deprecated Use `autosize` and `autofill` instead.\n@mixin text-field {\n  @include text-field-autosize();\n  @include text-field-autofill();\n}\n","@use 'sass:map';\n@use '../style/layout-common';\n\n/// Mixin that turns on strong focus indicators.\n///\n/// @example\n///   .my-app {\n///     @include mat-strong-focus-indicators($config);\n///   }\n@mixin strong-focus-indicators($config: ()) {\n  // Default focus indicator config.\n  $default-config: (\n    border-style: solid,\n    border-width: 3px,\n    border-radius: 4px,\n  );\n\n  // Merge default config with user config.\n  $config: map.merge($default-config, $config);\n  $border-style: map.get($config, border-style);\n  $border-width: map.get($config, border-width);\n  $border-radius: map.get($config, border-radius);\n\n  // Base styles for focus indicators.\n  .mat-focus-indicator::before {\n    @include layout-common.fill();\n    box-sizing: border-box;\n    pointer-events: none;\n    border: $border-width $border-style transparent;\n    border-radius: $border-radius;\n  }\n\n  // By default, all focus indicators are flush with the bounding box of their\n  // host element. For particular elements (listed below), default inset/offset\n  // values are necessary to ensure that the focus indicator is sufficiently\n  // contrastive and renders appropriately.\n\n  .mat-focus-indicator.mat-flat-button::before,\n  .mat-focus-indicator.mat-raised-button::before,\n  .mat-focus-indicator.mat-fab::before,\n  .mat-focus-indicator.mat-mini-fab::before,\n  .mat-focus-indicator.mat-chip::before,\n  .mat-focus-indicator.mat-sort-header-container::before {\n    margin: -($border-width + 2px);\n  }\n\n  .mat-focus-indicator.mat-stroked-button::before,\n  .mat-focus-indicator.mat-calendar-body-cell-content::before {\n    margin: -($border-width + 3px);\n  }\n\n  .mat-focus-indicator.mat-tab-link::before,\n  .mat-focus-indicator.mat-tab-label::before {\n    margin: 5px;\n  }\n\n  // Render the focus indicator on focus. Defining a pseudo element's\n  // content will cause it to render.\n\n  // Checkboxes, radios, and slide toggles render focus indicators when the\n  // associated visually-hidden input is focused.\n  .mat-checkbox-input:focus ~ .mat-focus-indicator::before,\n  .mat-radio-input:focus ~ .mat-focus-indicator::before,\n  .mat-slide-toggle-input:focus ~ .mat-slide-toggle-thumb-container .mat-focus-indicator::before,\n\n  // For options, render the focus indicator when the class .mat-active\n  // is present.\n  .mat-focus-indicator.mat-option.mat-active::before,\n\n  // For calendar cells, render the focus indicator when the parent cell is\n  // focused.\n  .mat-calendar-body-cell:focus .mat-focus-indicator::before,\n\n  // Stepper headers have the focus indicator as a descendant,\n  // because `::before` is used for other styling.\n  .mat-step-header:focus .mat-focus-indicator::before,\n\n  // For all other components, render the focus indicator on focus.\n  .mat-focus-indicator:focus::before {\n    content: '';\n  }\n}\n\n// Mixin that ensures focus indicator host elements are positioned so that the focus indicator\n// pseudo element within is positioned relative to the host. Private mixin included within\n// `mat-core`.\n@mixin private-strong-focus-indicators-positioning() {\n  .mat-focus-indicator {\n    position: relative;\n  }\n}\n","@use '../../cdk/overlay';\n@use '../../cdk/a11y';\n@use '../../cdk/text-field';\n\n// Core styles that can be used to apply material design treatments to any element.\n@use './ripple/ripple';\n@use './focus-indicators/focus-indicators';\n@use './typography/all-typography';\n\n// Mixin that renders all of the core styles that are not theme-dependent.\n@mixin core($typography-config: null) {\n  @include all-typography.all-component-typographies($typography-config);\n  @include ripple.ripple();\n  @include a11y.a11y-visually-hidden();\n  @include overlay.overlay();\n  @include text-field.text-field-autosize();\n  @include text-field.text-field-autofill();\n\n  @include focus-indicators.private-strong-focus-indicators-positioning();\n  @include _mdc-core();\n}\n\n// Mixin that renders all of the core MDC styles. Private mixin included with `mat-core`.\n@mixin _mdc-core() {\n  @include _mdc-strong-focus-indicators-positioning();\n}\n\n// Mixin that ensures focus indicator host elements are positioned so that the focus indicator\n// pseudo element within is positioned relative to the host. Private mixin included within\n// `_mat-mdc-core`.\n@mixin _mdc-strong-focus-indicators-positioning() {\n  .mat-mdc-focus-indicator {\n    position: relative;\n  }\n}\n","@use 'sass:map';\n@use 'sass:meta';\n@use '../theming/theming';\n\n// Colors for the ripple elements.\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $foreground-base: map.get($foreground, base);\n  $color-opacity: 0.1;\n\n  .mat-ripple-element {\n    // If the ripple color is resolves to a color *type*, we can use it directly, otherwise\n    // (e.g. it resolves to a CSS variable) we fall back to using the color and setting an opacity.\n    @if (meta.type-of($foreground-base) == color) {\n      background-color: rgba($foreground-base, $color-opacity);\n    }\n    @else {\n      background-color: $foreground-base;\n      opacity: $color-opacity;\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-ripple') {\n    $color: theming.get-color-config($theme);\n    @if $color != null {\n      @include color($color);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../../theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $is-dark-theme: map.get($config, is-dark);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n\n  // NOTE(traviskaufman): While the spec calls for translucent blacks/whites for disabled colors,\n  // this does not work well with elements layered on top of one another. To get around this we\n  // blend the colors together based on the base color and the theme background.\n  $white-30pct-opacity-on-dark: #686868;\n  $black-26pct-opacity-on-light: #b0b0b0;\n  $disabled-color: if($is-dark-theme, $white-30pct-opacity-on-dark, $black-26pct-opacity-on-light);\n  $colored-box-selector: '.mat-pseudo-checkbox-checked, .mat-pseudo-checkbox-indeterminate';\n\n  .mat-pseudo-checkbox {\n    color: theming.get-color-from-palette(map.get($config, foreground), secondary-text);\n\n    &::after {\n      color: theming.get-color-from-palette($background, background);\n    }\n  }\n\n  .mat-pseudo-checkbox-disabled {\n    color: $disabled-color;\n  }\n\n  .mat-primary .mat-pseudo-checkbox-checked,\n  .mat-primary .mat-pseudo-checkbox-indeterminate {\n    background: theming.get-color-from-palette(map.get($config, primary));\n  }\n\n  // Default to the accent color. Note that the pseudo checkboxes are meant to inherit the\n  // theme from their parent, rather than implementing their own theming, which is why we\n  // don't attach to the `mat-*` classes. Also note that this needs to be below `.mat-primary`\n  // in order to allow for the color to be overwritten if the checkbox is inside a parent that\n  // has `mat-accent` and is placed inside another parent that has `mat-primary`.\n  .mat-pseudo-checkbox-checked,\n  .mat-pseudo-checkbox-indeterminate,\n  .mat-accent .mat-pseudo-checkbox-checked,\n  .mat-accent .mat-pseudo-checkbox-indeterminate {\n    background: theming.get-color-from-palette(map.get($config, accent));\n  }\n\n  .mat-warn .mat-pseudo-checkbox-checked,\n  .mat-warn .mat-pseudo-checkbox-indeterminate {\n    background: theming.get-color-from-palette(map.get($config, warn));\n  }\n\n  .mat-pseudo-checkbox-checked,\n  .mat-pseudo-checkbox-indeterminate {\n    &.mat-pseudo-checkbox-disabled {\n      background: $disabled-color;\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-pseudo-checkbox') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'theming/theming';\n@use './style/private';\n@use './ripple/ripple-theme';\n@use './option/option-theme';\n@use './option/optgroup-theme';\n@use './selection/pseudo-checkbox/pseudo-checkbox-theme';\n@use './style/elevation';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  // Wrapper element that provides the theme background when the user's content isn't\n  // inside of a `mat-sidenav-container`. Note that we need to exclude the ampersand\n  // selector in case the mixin is included at the top level.\n  .mat-app-background#{if(&, ', &.mat-app-background', '')} {\n    $background: map.get($config, background);\n    $foreground: map.get($config, foreground);\n\n    background-color: theming.get-color-from-palette($background, background);\n    color: theming.get-color-from-palette($foreground, text);\n  }\n\n  // Provides external CSS classes for each elevation value. Each CSS class is formatted as\n  // `mat-elevation-z$zValue` where `$zValue` corresponds to the z-space to which the element is\n  // elevated.\n  @for $zValue from 0 through 24 {\n    .#{elevation.$prefix}#{$zValue} {\n      @include private.private-theme-elevation($zValue, $config);\n    }\n  }\n\n  // Marker that is used to determine whether the user has added a theme to their page.\n  @at-root {\n    .mat-theme-loaded-marker {\n      display: none;\n    }\n  }\n}\n\n// Mixin that renders all of the core styles that depend on the theme.\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  // Wrap the sub-theme includes in the duplicate theme styles mixin. This ensures that\n  // there won't be multiple warnings. e.g. if `mat-core-theme` reports a warning, then\n  // the imported themes (such as `mat-ripple-theme`) should not report again.\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-core') {\n    @include ripple-theme.theme($theme);\n    @include option-theme.theme($theme);\n    @include optgroup-theme.theme($theme);\n    @include pseudo-checkbox-theme.theme($theme);\n\n    $color: theming.get-color-config($theme);\n    @if $color != null {\n      @include color($color);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:math';\n@use 'sass:meta';\n@use 'variables';\n\n\n// A collection of mixins and CSS classes that can be used to apply elevation to a material\n// element.\n// See: https://material.io/design/environment/elevation.html\n// Examples:\n//\n//\n// .mat-foo {\n//   @include $mat-elevation(2);\n//\n//   &:active {\n//     @include $mat-elevation(8);\n//   }\n// }\n//\n// <div id=\"external-card\" class=\"mat-elevation-z2\"><p>Some content</p></div>\n//\n// For an explanation of the design behind how elevation is implemented, see the design doc at\n// https://goo.gl/Kq0k9Z.\n\n// Colors for umbra, penumbra, and ambient shadows. As described in the design doc, each elevation\n// level is created using a set of 3 shadow values, one for umbra (the shadow representing the\n// space completely obscured by an object relative to its light source), one for penumbra (the\n// space partially obscured by an object), and one for ambient (the space which contains the object\n// itself). For a further explanation of these terms and their meanings, see\n// https://en.wikipedia.org/wiki/Umbra,_penumbra_and_antumbra.\n\n// Maps for the different shadow sets and their values within each z-space. These values were\n// created by taking a few reference shadow sets created by Google's Designers and interpolating\n// all of the values between them.\n\n@function _get-umbra-map($color, $opacity) {\n  $shadow-color: if(meta.type-of($color) == color, rgba($color, $opacity * 0.2), $color);\n\n  @return (\n    0: '0px 0px 0px 0px #{$shadow-color}',\n    1: '0px 2px 1px -1px #{$shadow-color}',\n    2: '0px 3px 1px -2px #{$shadow-color}',\n    3: '0px 3px 3px -2px #{$shadow-color}',\n    4: '0px 2px 4px -1px #{$shadow-color}',\n    5: '0px 3px 5px -1px #{$shadow-color}',\n    6: '0px 3px 5px -1px #{$shadow-color}',\n    7: '0px 4px 5px -2px #{$shadow-color}',\n    8: '0px 5px 5px -3px #{$shadow-color}',\n    9: '0px 5px 6px -3px #{$shadow-color}',\n    10: '0px 6px 6px -3px #{$shadow-color}',\n    11: '0px 6px 7px -4px #{$shadow-color}',\n    12: '0px 7px 8px -4px #{$shadow-color}',\n    13: '0px 7px 8px -4px #{$shadow-color}',\n    14: '0px 7px 9px -4px #{$shadow-color}',\n    15: '0px 8px 9px -5px #{$shadow-color}',\n    16: '0px 8px 10px -5px #{$shadow-color}',\n    17: '0px 8px 11px -5px #{$shadow-color}',\n    18: '0px 9px 11px -5px #{$shadow-color}',\n    19: '0px 9px 12px -6px #{$shadow-color}',\n    20: '0px 10px 13px -6px #{$shadow-color}',\n    21: '0px 10px 13px -6px #{$shadow-color}',\n    22: '0px 10px 14px -6px #{$shadow-color}',\n    23: '0px 11px 14px -7px #{$shadow-color}',\n    24: '0px 11px 15px -7px #{$shadow-color}'\n  );\n}\n\n@function _get-penumbra-map($color, $opacity) {\n  $shadow-color: if(meta.type-of($color) == color, rgba($color, $opacity * 0.14), $color);\n\n  @return (\n    0: '0px 0px 0px 0px #{$shadow-color}',\n    1: '0px 1px 1px 0px #{$shadow-color}',\n    2: '0px 2px 2px 0px #{$shadow-color}',\n    3: '0px 3px 4px 0px #{$shadow-color}',\n    4: '0px 4px 5px 0px #{$shadow-color}',\n    5: '0px 5px 8px 0px #{$shadow-color}',\n    6: '0px 6px 10px 0px #{$shadow-color}',\n    7: '0px 7px 10px 1px #{$shadow-color}',\n    8: '0px 8px 10px 1px #{$shadow-color}',\n    9: '0px 9px 12px 1px #{$shadow-color}',\n    10: '0px 10px 14px 1px #{$shadow-color}',\n    11: '0px 11px 15px 1px #{$shadow-color}',\n    12: '0px 12px 17px 2px #{$shadow-color}',\n    13: '0px 13px 19px 2px #{$shadow-color}',\n    14: '0px 14px 21px 2px #{$shadow-color}',\n    15: '0px 15px 22px 2px #{$shadow-color}',\n    16: '0px 16px 24px 2px #{$shadow-color}',\n    17: '0px 17px 26px 2px #{$shadow-color}',\n    18: '0px 18px 28px 2px #{$shadow-color}',\n    19: '0px 19px 29px 2px #{$shadow-color}',\n    20: '0px 20px 31px 3px #{$shadow-color}',\n    21: '0px 21px 33px 3px #{$shadow-color}',\n    22: '0px 22px 35px 3px #{$shadow-color}',\n    23: '0px 23px 36px 3px #{$shadow-color}',\n    24: '0px 24px 38px 3px #{$shadow-color}'\n  );\n}\n\n@function _get-ambient-map($color, $opacity) {\n  $shadow-color: if(meta.type-of($color) == color, rgba($color, $opacity * 0.12), $color);\n\n  @return (\n    0: '0px 0px 0px 0px #{$shadow-color}',\n    1: '0px 1px 3px 0px #{$shadow-color}',\n    2: '0px 1px 5px 0px #{$shadow-color}',\n    3: '0px 1px 8px 0px #{$shadow-color}',\n    4: '0px 1px 10px 0px #{$shadow-color}',\n    5: '0px 1px 14px 0px #{$shadow-color}',\n    6: '0px 1px 18px 0px #{$shadow-color}',\n    7: '0px 2px 16px 1px #{$shadow-color}',\n    8: '0px 3px 14px 2px #{$shadow-color}',\n    9: '0px 3px 16px 2px #{$shadow-color}',\n    10: '0px 4px 18px 3px #{$shadow-color}',\n    11: '0px 4px 20px 3px #{$shadow-color}',\n    12: '0px 5px 22px 4px #{$shadow-color}',\n    13: '0px 5px 24px 4px #{$shadow-color}',\n    14: '0px 5px 26px 4px #{$shadow-color}',\n    15: '0px 6px 28px 5px #{$shadow-color}',\n    16: '0px 6px 30px 5px #{$shadow-color}',\n    17: '0px 6px 32px 5px #{$shadow-color}',\n    18: '0px 7px 34px 6px #{$shadow-color}',\n    19: '0px 7px 36px 6px #{$shadow-color}',\n    20: '0px 8px 38px 7px #{$shadow-color}',\n    21: '0px 8px 40px 7px #{$shadow-color}',\n    22: '0px 8px 42px 7px #{$shadow-color}',\n    23: '0px 9px 44px 8px #{$shadow-color}',\n    24: '0px 9px 46px 8px #{$shadow-color}'\n  );\n}\n\n// The default duration value for elevation transitions.\n$transition-duration: 280ms !default;\n\n// The default easing value for elevation transitions.\n$transition-timing-function: variables.$fast-out-slow-in-timing-function;\n\n// The default color for elevation shadows.\n$color: black !default;\n\n// The default opacity scaling value for elevation shadows.\n$opacity: 1 !default;\n\n// Prefix for elevation-related selectors.\n$prefix: 'mat-elevation-z';\n\n// Applies the correct css rules to an element to give it the elevation specified by $zValue.\n// The $zValue must be between 0 and 24.\n@mixin elevation($zValue, $color: $color, $opacity: $opacity) {\n  @if meta.type-of($zValue) != number or not math.is-unitless($zValue) {\n    @error '$zValue must be a unitless number';\n  }\n  @if $zValue < 0 or $zValue > 24 {\n    @error '$zValue must be between 0 and 24';\n  }\n\n  box-shadow: #{map.get(_get-umbra-map($color, $opacity), $zValue)},\n              #{map.get(_get-penumbra-map($color, $opacity), $zValue)},\n              #{map.get(_get-ambient-map($color, $opacity), $zValue)};\n}\n\n// Applies the elevation to an element in a manner that allows\n// consumers to override it via the Material elevation classes.\n@mixin overridable-elevation(\n    $zValue,\n    $color: $color,\n    $opacity: $opacity) {\n  &:not([class*='#{$prefix}']) {\n    @include elevation($zValue, $color, $opacity);\n  }\n}\n\n// Returns a string that can be used as the value for a transition property for elevation.\n// Calling this function directly is useful in situations where a component needs to transition\n// more than one property.\n//\n// .foo {\n//   transition: mat-elevation-transition-property-value(), opacity 100ms ease;\n// }\n@function private-transition-property-value(\n    $duration: $transition-duration,\n    $easing: $transition-timing-function) {\n  @return box-shadow #{$duration} #{$easing};\n}\n\n// Applies the correct css rules needed to have an element transition between elevations.\n// This mixin should be applied to elements whose elevation values will change depending on their\n// context (e.g. when active or disabled).\n//\n// NOTE(traviskaufman): Both this mixin and the above function use default parameters so they can\n// be used in the same way by clients.\n@mixin elevation-transition(\n    $duration: $transition-duration,\n    $easing: $transition-timing-function) {\n  transition: private-transition-property-value($duration, $easing);\n}\n","@use 'sass:map';\n@use '../core/style/private';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n\n  .mat-autocomplete-panel {\n    @include private.private-theme-overridable-elevation(4, $config);\n    background: theming.get-color-from-palette($background, card);\n    color: theming.get-color-from-palette($foreground, text);\n\n    // Selected options in autocompletes should not be gray, but we\n    // only want to override the background for selected options if\n    // they are *not* in hover or focus state. This change has to be\n    // made here because base option styles are shared between the\n    // autocomplete and the select.\n    .mat-option.mat-selected:not(.mat-active):not(:hover) {\n      background: theming.get-color-from-palette($background, card);\n\n      &:not(.mat-option-disabled) {\n        color: theming.get-color-from-palette($foreground, text);\n      }\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-autocomplete') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n\n  .mat-divider {\n    border-top-color: theming.get-color-from-palette($foreground, divider);\n  }\n\n  .mat-divider-vertical {\n    border-right-color: theming.get-color-from-palette($foreground, divider);\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-divider') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@mixin private-expansion-focus {\n  .mat-expansion-panel {\n    & .mat-expansion-panel-header.cdk-keyboard-focused,\n    & .mat-expansion-panel-header.cdk-program-focused,\n    &:not(.mat-expanded) .mat-expansion-panel-header:hover {\n      &:not([aria-disabled='true']) {\n        @content;\n      }\n    }\n  }\n}\n","@use 'sass:map';\n@use '../theming/theming';\n\n// Renders a gradient for showing the dashed line when the input is disabled.\n// Unlike using a border, a gradient allows us to adjust the spacing of the dotted line\n// to match the Material Design spec.\n@mixin private-control-disabled-underline($color) {\n  background-image: linear-gradient(to right, $color 0%, $color 33%, transparent 0%);\n  background-size: 4px 100%;\n  background-repeat: repeat-x;\n}\n\n// Figures out the color of the placeholder for a form control.\n// Used primarily to prevent the various form controls from\n// becoming out of sync since these colors aren't in a palette.\n@function private-control-placeholder-color($config) {\n  $foreground: map.get($config, foreground);\n  $is-dark-theme: map.get($config, is-dark);\n  @return theming.get-color-from-palette($foreground, secondary-text,\n    if($is-dark-theme, 0.5, 0.42));\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/style/form-common';\n\n\n// Theme styles that only apply to the standard appearance of the form-field.\n\n@mixin standard-color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $is-dark-theme: map.get($config, is-dark);\n  $underline-color:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 0.7, 0.42));\n\n  .mat-form-field-appearance-standard {\n    .mat-form-field-underline {\n      background-color: $underline-color;\n    }\n\n    &.mat-form-field-disabled .mat-form-field-underline {\n      @include form-common.private-control-disabled-underline($underline-color);\n    }\n  }\n}\n\n@mixin standard-typography($config-or-theme) {}\n\n@mixin private-form-field-standard-density($config-or-theme) {}\n\n@mixin standard-theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-form-field-standard') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include standard-color($color);\n    }\n    @if $density != null {\n      @include private-form-field-standard-density($density);\n    }\n    @if $typography != null {\n      @include standard-typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-icon {\n    &.mat-primary {\n      color: theming.get-color-from-palette($primary, text);\n    }\n\n    &.mat-accent {\n      color: theming.get-color-from-palette($accent, text);\n    }\n\n    &.mat-warn {\n      color: theming.get-color-from-palette($warn, text);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-icon') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n","// stylelint-disable material/no-prefixes\n@mixin user-select($value) {\n  -webkit-user-select: $value;\n  -moz-user-select: $value;\n  -ms-user-select: $value;\n  user-select: $value;\n}\n\n@mixin input-placeholder {\n  &::placeholder {\n    @content;\n  }\n\n  &::-moz-placeholder {\n    @content;\n  }\n\n  &::-webkit-input-placeholder {\n    @content;\n  }\n\n  &:-ms-input-placeholder {\n    @content;\n  }\n}\n\n@mixin cursor-grab {\n  cursor: -webkit-grab;\n  cursor: grab;\n}\n\n@mixin cursor-grabbing {\n  cursor: -webkit-grabbing;\n  cursor: grabbing;\n}\n\n@mixin backface-visibility($value) {\n  -webkit-backface-visibility: $value;\n  backface-visibility: $value;\n}\n\n@mixin position-sticky($important: false) {\n  position: -webkit-sticky #{if($important, '!important', '')};\n  position: sticky #{if($important, '!important', '')};\n}\n\n@mixin private-color-adjust($value) {\n  -webkit-print-color-adjust: $value;\n  color-adjust: $value;\n}\n\n@mixin private-background-clip($value) {\n  -webkit-background-clip: $value;\n  background-clip: $value;\n}\n// stylelint-enable\n","@use 'sass:map';\n@use 'sass:meta';\n@use 'sass:color';\n@use '../core/theming/theming';\n\n// Approximates the correct buffer color by using a mix between the theme color\n// and the theme's background color.\n@function _get-buffer-color($theme, $background) {\n  $theme-color: theming.get-color-from-palette($theme);\n  // Return fallback color if the theme uses variables to define colors.\n  @if (meta.type-of($theme-color) != 'color' or meta.type-of($background) != 'color') {\n    @return theming.get-color-from-palette($theme, lighter);\n  }\n  @return color.mix($theme-color, $background, $weight: 25%);\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get(map.get($config, background), background);\n\n  .mat-progress-bar-background {\n    fill: _get-buffer-color($primary, $background);\n  }\n\n  .mat-progress-bar-buffer {\n    background-color: _get-buffer-color($primary, $background);\n  }\n\n  .mat-progress-bar-fill::after {\n    background-color: theming.get-color-from-palette($primary);\n  }\n\n  .mat-progress-bar.mat-accent {\n    .mat-progress-bar-background {\n      fill: _get-buffer-color($accent, $background);\n    }\n\n    .mat-progress-bar-buffer {\n      background-color: _get-buffer-color($accent, $background);\n    }\n\n    .mat-progress-bar-fill::after {\n      background-color: theming.get-color-from-palette($accent);\n    }\n  }\n\n  .mat-progress-bar.mat-warn {\n    .mat-progress-bar-background {\n      fill: _get-buffer-color($warn, $background);\n    }\n\n    .mat-progress-bar-buffer {\n      background-color: _get-buffer-color($warn, $background);\n    }\n\n    .mat-progress-bar-fill::after {\n      background-color: theming.get-color-from-palette($warn);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-progress-bar') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n","@use 'sass:map';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n\n  .mat-progress-spinner, .mat-spinner {\n    circle {\n      stroke: theming.get-color-from-palette($primary);\n    }\n\n    &.mat-accent circle {\n      stroke: theming.get-color-from-palette($accent);\n    }\n\n    &.mat-warn circle {\n      stroke: theming.get-color-from-palette($warn);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-progress-spinner') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:color';\n@use 'sass:map';\n@use 'sass:meta';\n@use '../core/style/private';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  $drawer-background-color: theming.get-color-from-palette($background, dialog);\n  $drawer-container-background-color:  theming.get-color-from-palette($background, background);\n  $drawer-push-background-color: theming.get-color-from-palette($background, dialog);\n  $drawer-side-border: solid 1px theming.get-color-from-palette($foreground, divider);\n\n  .mat-drawer-container {\n    background-color: $drawer-container-background-color;\n    color: theming.get-color-from-palette($foreground, text);\n  }\n\n  .mat-drawer {\n    background-color: $drawer-background-color;\n    color: theming.get-color-from-palette($foreground, text);\n\n    &.mat-drawer-push {\n      background-color: $drawer-push-background-color;\n    }\n\n    &:not(.mat-drawer-side) {\n      // The elevation of z-16 is noted in the design specifications.\n      // See https://material.io/design/components/navigation-drawer.html\n      @include private.private-theme-elevation(16, $config);\n    }\n  }\n\n  .mat-drawer-side {\n    border-right: $drawer-side-border;\n\n    &.mat-drawer-end {\n      border-left: $drawer-side-border;\n      border-right: none;\n    }\n  }\n\n  [dir='rtl'] .mat-drawer-side {\n    border-left: $drawer-side-border;\n    border-right: none;\n\n    &.mat-drawer-end {\n      border-left: none;\n      border-right: $drawer-side-border;\n    }\n  }\n\n  .mat-drawer-backdrop.mat-drawer-shown {\n    $opacity: 0.6;\n    $backdrop-color: theming.get-color-from-palette($background, card, $opacity);\n\n    @if (meta.type-of($backdrop-color) == color) {\n      // We use invert() here to have the darken the background color expected to be used. If the\n      // background is light, we use a dark backdrop. If the background is dark,\n      // we use a light backdrop.\n      background-color: color.invert($backdrop-color);\n    }\n    @else {\n      // If we couldn't resolve the backdrop color to a color value, fall back to using\n      // `opacity` to make it opaque since its end value could be a solid color.\n      background-color: $backdrop-color;\n      opacity: $opacity;\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-sidenav') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:color';\n@use 'sass:map';\n@use 'sass:meta';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-sort-header-arrow {\n    $table-background: theming.get-color-from-palette($background, 'card');\n    $text-color: theming.get-color-from-palette($foreground, secondary-text);\n\n    // Because the arrow is made up of multiple elements that are stacked on top of each other,\n    // we can't use the semi-transparent color from the theme directly. If the value is a color\n    // *type*, we convert it into a solid color by taking the opacity from the rgba value and\n    // using the value to determine the percentage of the background to put into foreground\n    // when mixing the colors together. Otherwise, if it resolves to something different\n    // (e.g. it resolves to a CSS variable), we use the color directly.\n    @if (meta.type-of($table-background) == color and meta.type-of($text-color) == color) {\n      $text-opacity: opacity($text-color);\n      color: color.mix($table-background, rgba($text-color, 1), (1 - $text-opacity) * 100%);\n    }\n    @else {\n      color: $text-color;\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-sort') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n// Color palettes from the Material Design spec.\n// See https://material.io/design/color/\n//\n// Contrast colors are hard-coded because it is too difficult (probably impossible) to\n// calculate them. These contrast colors are pulled from the public Material Design spec swatches.\n// While the contrast colors in the spec are not prescriptive, we use them for convenience.\n\n\n// @deprecated renamed to $dark-primary-text.\n// @breaking-change 8.0.0\n$black-87-opacity: rgba(black, 0.87);\n// @deprecated renamed to $light-primary-text.\n// @breaking-change 8.0.0\n$white-87-opacity: rgba(white, 0.87);\n// @deprecated use $dark-[secondary-text,disabled-text,dividers,focused] instead.\n// @breaking-change 8.0.0\n$black-12-opacity: rgba(black, 0.12);\n// @deprecated use $light-[secondary-text,disabled-text,dividers,focused] instead.\n// @breaking-change 8.0.0\n$white-12-opacity: rgba(white, 0.12);\n// @deprecated use $dark-[secondary-text,disabled-text,dividers,focused] instead.\n// @breaking-change 8.0.0\n$black-6-opacity: rgba(black, 0.06);\n// @deprecated use $light-[secondary-text,disabled-text,dividers,focused] instead.\n// @breaking-change 8.0.0\n$white-6-opacity: rgba(white, 0.06);\n\n$dark-primary-text: rgba(black, 0.87);\n$dark-secondary-text: rgba(black, 0.54);\n$dark-disabled-text: rgba(black, 0.38);\n$dark-dividers: rgba(black, 0.12);\n$dark-focused: rgba(black, 0.12);\n$light-primary-text: white;\n$light-secondary-text: rgba(white, 0.7);\n$light-disabled-text: rgba(white, 0.5);\n$light-dividers: rgba(white, 0.12);\n$light-focused: rgba(white, 0.12);\n\n$red-palette: (\n  50: #ffebee,\n  100: #ffcdd2,\n  200: #ef9a9a,\n  300: #e57373,\n  400: #ef5350,\n  500: #f44336,\n  600: #e53935,\n  700: #d32f2f,\n  800: #c62828,\n  900: #b71c1c,\n  A100: #ff8a80,\n  A200: #ff5252,\n  A400: #ff1744,\n  A700: #d50000,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$pink-palette: (\n  50: #fce4ec,\n  100: #f8bbd0,\n  200: #f48fb1,\n  300: #f06292,\n  400: #ec407a,\n  500: #e91e63,\n  600: #d81b60,\n  700: #c2185b,\n  800: #ad1457,\n  900: #880e4f,\n  A100: #ff80ab,\n  A200: #ff4081,\n  A400: #f50057,\n  A700: #c51162,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$purple-palette: (\n  50: #f3e5f5,\n  100: #e1bee7,\n  200: #ce93d8,\n  300: #ba68c8,\n  400: #ab47bc,\n  500: #9c27b0,\n  600: #8e24aa,\n  700: #7b1fa2,\n  800: #6a1b9a,\n  900: #4a148c,\n  A100: #ea80fc,\n  A200: #e040fb,\n  A400: #d500f9,\n  A700: #aa00ff,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $light-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$deep-purple-palette: (\n  50: #ede7f6,\n  100: #d1c4e9,\n  200: #b39ddb,\n  300: #9575cd,\n  400: #7e57c2,\n  500: #673ab7,\n  600: #5e35b1,\n  700: #512da8,\n  800: #4527a0,\n  900: #311b92,\n  A100: #b388ff,\n  A200: #7c4dff,\n  A400: #651fff,\n  A700: #6200ea,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $light-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$indigo-palette: (\n  50: #e8eaf6,\n  100: #c5cae9,\n  200: #9fa8da,\n  300: #7986cb,\n  400: #5c6bc0,\n  500: #3f51b5,\n  600: #3949ab,\n  700: #303f9f,\n  800: #283593,\n  900: #1a237e,\n  A100: #8c9eff,\n  A200: #536dfe,\n  A400: #3d5afe,\n  A700: #304ffe,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $light-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$blue-palette: (\n  50: #e3f2fd,\n  100: #bbdefb,\n  200: #90caf9,\n  300: #64b5f6,\n  400: #42a5f5,\n  500: #2196f3,\n  600: #1e88e5,\n  700: #1976d2,\n  800: #1565c0,\n  900: #0d47a1,\n  A100: #82b1ff,\n  A200: #448aff,\n  A400: #2979ff,\n  A700: #2962ff,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$light-blue-palette: (\n  50: #e1f5fe,\n  100: #b3e5fc,\n  200: #81d4fa,\n  300: #4fc3f7,\n  400: #29b6f6,\n  500: #03a9f4,\n  600: #039be5,\n  700: #0288d1,\n  800: #0277bd,\n  900: #01579b,\n  A100: #80d8ff,\n  A200: #40c4ff,\n  A400: #00b0ff,\n  A700: #0091ea,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$cyan-palette: (\n  50: #e0f7fa,\n  100: #b2ebf2,\n  200: #80deea,\n  300: #4dd0e1,\n  400: #26c6da,\n  500: #00bcd4,\n  600: #00acc1,\n  700: #0097a7,\n  800: #00838f,\n  900: #006064,\n  A100: #84ffff,\n  A200: #18ffff,\n  A400: #00e5ff,\n  A700: #00b8d4,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$teal-palette: (\n  50: #e0f2f1,\n  100: #b2dfdb,\n  200: #80cbc4,\n  300: #4db6ac,\n  400: #26a69a,\n  500: #009688,\n  600: #00897b,\n  700: #00796b,\n  800: #00695c,\n  900: #004d40,\n  A100: #a7ffeb,\n  A200: #64ffda,\n  A400: #1de9b6,\n  A700: #00bfa5,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$green-palette: (\n  50: #e8f5e9,\n  100: #c8e6c9,\n  200: #a5d6a7,\n  300: #81c784,\n  400: #66bb6a,\n  500: #4caf50,\n  600: #43a047,\n  700: #388e3c,\n  800: #2e7d32,\n  900: #1b5e20,\n  A100: #b9f6ca,\n  A200: #69f0ae,\n  A400: #00e676,\n  A700: #00c853,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$light-green-palette: (\n  50: #f1f8e9,\n  100: #dcedc8,\n  200: #c5e1a5,\n  300: #aed581,\n  400: #9ccc65,\n  500: #8bc34a,\n  600: #7cb342,\n  700: #689f38,\n  800: #558b2f,\n  900: #33691e,\n  A100: #ccff90,\n  A200: #b2ff59,\n  A400: #76ff03,\n  A700: #64dd17,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$lime-palette: (\n  50: #f9fbe7,\n  100: #f0f4c3,\n  200: #e6ee9c,\n  300: #dce775,\n  400: #d4e157,\n  500: #cddc39,\n  600: #c0ca33,\n  700: #afb42b,\n  800: #9e9d24,\n  900: #827717,\n  A100: #f4ff81,\n  A200: #eeff41,\n  A400: #c6ff00,\n  A700: #aeea00,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $dark-primary-text,\n    800: $dark-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$yellow-palette: (\n  50: #fffde7,\n  100: #fff9c4,\n  200: #fff59d,\n  300: #fff176,\n  400: #ffee58,\n  500: #ffeb3b,\n  600: #fdd835,\n  700: #fbc02d,\n  800: #f9a825,\n  900: #f57f17,\n  A100: #ffff8d,\n  A200: #ffff00,\n  A400: #ffea00,\n  A700: #ffd600,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $dark-primary-text,\n    800: $dark-primary-text,\n    900: $dark-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$amber-palette: (\n  50: #fff8e1,\n  100: #ffecb3,\n  200: #ffe082,\n  300: #ffd54f,\n  400: #ffca28,\n  500: #ffc107,\n  600: #ffb300,\n  700: #ffa000,\n  800: #ff8f00,\n  900: #ff6f00,\n  A100: #ffe57f,\n  A200: #ffd740,\n  A400: #ffc400,\n  A700: #ffab00,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $dark-primary-text,\n    800: $dark-primary-text,\n    900: $dark-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$orange-palette: (\n  50: #fff3e0,\n  100: #ffe0b2,\n  200: #ffcc80,\n  300: #ffb74d,\n  400: #ffa726,\n  500: #ff9800,\n  600: #fb8c00,\n  700: #f57c00,\n  800: #ef6c00,\n  900: #e65100,\n  A100: #ffd180,\n  A200: #ffab40,\n  A400: #ff9100,\n  A700: #ff6d00,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $dark-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: black,\n  )\n);\n\n$deep-orange-palette: (\n  50: #fbe9e7,\n  100: #ffccbc,\n  200: #ffab91,\n  300: #ff8a65,\n  400: #ff7043,\n  500: #ff5722,\n  600: #f4511e,\n  700: #e64a19,\n  800: #d84315,\n  900: #bf360c,\n  A100: #ff9e80,\n  A200: #ff6e40,\n  A400: #ff3d00,\n  A700: #dd2c00,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$brown-palette: (\n  50: #efebe9,\n  100: #d7ccc8,\n  200: #bcaaa4,\n  300: #a1887f,\n  400: #8d6e63,\n  500: #795548,\n  600: #6d4c41,\n  700: #5d4037,\n  800: #4e342e,\n  900: #3e2723,\n  A100: #d7ccc8,\n  A200: #bcaaa4,\n  A400: #8d6e63,\n  A700: #5d4037,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $light-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$grey-palette: (\n  50: #fafafa,\n  100: #f5f5f5,\n  200: #eeeeee,\n  300: #e0e0e0,\n  400: #bdbdbd,\n  500: #9e9e9e,\n  600: #757575,\n  700: #616161,\n  800: #424242,\n  900: #212121,\n  A100: #ffffff,\n  A200: #eeeeee,\n  A400: #bdbdbd,\n  A700: #616161,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n// Alias for alternate spelling.\n$gray-palette: $grey-palette;\n\n$blue-grey-palette: (\n  50: #eceff1,\n  100: #cfd8dc,\n  200: #b0bec5,\n  300: #90a4ae,\n  400: #78909c,\n  500: #607d8b,\n  600: #546e7a,\n  700: #455a64,\n  800: #37474f,\n  900: #263238,\n  A100: #cfd8dc,\n  A200: #b0bec5,\n  A400: #78909c,\n  A700: #455a64,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n// Alias for alternate spelling.\n$blue-gray-palette: $blue-grey-palette;\n\n\n// Background palette for light themes.\n$light-theme-background-palette: (\n  status-bar: map.get($grey-palette, 300),\n  app-bar:    map.get($grey-palette, 100),\n  background: map.get($grey-palette, 50),\n  hover:      rgba(black, 0.04), // TODO(kara): check style with Material Design UX\n  card:       white,\n  dialog:     white,\n  disabled-button: rgba(black, 0.12),\n  raised-button: white,\n  focused-button: $dark-focused,\n  selected-button: map.get($grey-palette, 300),\n  selected-disabled-button: map.get($grey-palette, 400),\n  disabled-button-toggle: map.get($grey-palette, 200),\n  unselected-chip: map.get($grey-palette, 300),\n  disabled-list-option: map.get($grey-palette, 200),\n  tooltip: map.get($grey-palette, 700),\n);\n\n// Background palette for dark themes.\n$dark-theme-background-palette: (\n  status-bar: black,\n  app-bar:    map.get($grey-palette, 900),\n  background: #303030,\n  hover:      rgba(white, 0.04), // TODO(kara): check style with Material Design UX\n  card:       map.get($grey-palette, 800),\n  dialog:     map.get($grey-palette, 800),\n  disabled-button: rgba(white, 0.12),\n  raised-button: map.get($grey-palette, 800),\n  focused-button: $light-focused,\n  selected-button: map.get($grey-palette, 900),\n  selected-disabled-button: map.get($grey-palette, 800),\n  disabled-button-toggle: black,\n  unselected-chip: map.get($grey-palette, 700),\n  disabled-list-option: black,\n  tooltip: map.get($grey-palette, 700),\n);\n\n// Foreground palette for light themes.\n$light-theme-foreground-palette: (\n  base:              black,\n  divider:           $dark-dividers,\n  dividers:          $dark-dividers,\n  disabled:          $dark-disabled-text,\n  disabled-button:   rgba(black, 0.26),\n  disabled-text:     $dark-disabled-text,\n  elevation:         black,\n  hint-text:         $dark-disabled-text,\n  secondary-text:    $dark-secondary-text,\n  icon:              rgba(black, 0.54),\n  icons:             rgba(black, 0.54),\n  text:              rgba(black, 0.87),\n  slider-min:        rgba(black, 0.87),\n  slider-off:        rgba(black, 0.26),\n  slider-off-active: rgba(black, 0.38),\n);\n\n// Foreground palette for dark themes.\n$dark-theme-foreground-palette: (\n  base:              white,\n  divider:           $light-dividers,\n  dividers:          $light-dividers,\n  disabled:          $light-disabled-text,\n  disabled-button:   rgba(white, 0.3),\n  disabled-text:     $light-disabled-text,\n  elevation:         black,\n  hint-text:         $light-disabled-text,\n  secondary-text:    $light-secondary-text,\n  icon:              white,\n  icons:             white,\n  text:              white,\n  slider-min:        white,\n  slider-off:        rgba(white, 0.3),\n  slider-off-active: rgba(white, 0.3),\n);\n","@use '@angular/material' as mat;\n@import \"~@angular/material/theming\";\n\n@include mat.core();\n\n// Define a light theme\n$light-primary: mat.define-palette(mat.$indigo-palette);\n$light-accent: mat.define-palette(mat.$pink-palette);\n$light-theme: mat.define-light-theme((\n color: (\n   primary: $light-primary,\n   accent: $light-accent,\n )\n));\n$_background: map-get($light-theme, background);\n$_foreground: map-get($light-theme, foreground);\n$light-background-color: mat-color($_background, background);\n$light-foreground-color: mat-color($_foreground, text);\n\n// Define a dark theme\n$dark-primary: mat.define-palette(mat.$pink-palette);\n$dark-accent: mat.define-palette(mat.$blue-gray-palette);\n$dark-theme: mat.define-dark-theme((\n color: (\n   primary: $dark-primary,\n   accent: $dark-accent\n )\n));\n$_background: map-get($dark-theme, background);\n$_foreground: map-get($dark-theme, foreground);\n$dark-background-color: mat-color($_background, background);\n$dark-foreground-color: mat-color($_foreground, text);\n$primary: #3f51b5;//#6296a6; //#fc9127;\n$success: #50a773;\n$warning: #ffa124;\n$error: #ee4c58;\n$darker: #fa7424;\n$extra-light-grey: #f4f4f4;//#dcdcdc\n$light-grey: #dcdcdc;\n$grey: #a6a5a5;\n$dark-grey: #7a7a7a;//#929090;\n$white: #fefefe;\n$white-60: #f2f2f2;\n$white-80: #fcfcfc;\n$black: #000000;\n$light-black-color: #3e3e3e;\n$white-opacity:#ffffffbb;\n$disabled-icon-color: $grey;\n\n"],"names":[],"sourceRoot":"webpack:///"}